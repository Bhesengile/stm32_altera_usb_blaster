
blasterBluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000388c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  080039f8  080039f8  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f8  080039f8  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08003a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200000dc  08003adc  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003adc  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9b0  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb2  00000000  00000000  0002bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000109dc  00000000  00000000  0002fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8af  00000000  00000000  0004040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000590a0  00000000  00000000  0004ccbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a5d5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002304  00000000  00000000  000a5db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003980 	.word	0x08003980

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08003980 	.word	0x08003980

0800014c <led_gpio_config>:
#define LED_OFF()	GPIOA->BRR = GPIO_Pin_9
#endif

// LED端口初始化
static void led_gpio_config(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

#if defined(BLUEPILL)
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000152:	2101      	movs	r1, #1
 8000154:	2010      	movs	r0, #16
 8000156:	f002 ff9b 	bl	8003090 <RCC_APB2PeriphClockCmd>

    // GPIOA Configuration: Pin 13
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_13;
 800015a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800015e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000160:	2302      	movs	r3, #2
 8000162:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000164:	2310      	movs	r3, #16
 8000166:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000168:	1d3b      	adds	r3, r7, #4
 800016a:	4619      	mov	r1, r3
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <led_gpio_config+0x30>)
 800016e:	f002 fe39 	bl	8002de4 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
#endif
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <led_init>:

/*-----------------------------------*/

// LED初始化
void led_init(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
    led_gpio_config();
 8000184:	f7ff ffe2 	bl	800014c <led_gpio_config>
    LED_OFF();
 8000188:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <led_init+0x24>)
 800018a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800018e:	615a      	str	r2, [r3, #20]

    s_led_last_time = millis();
 8000190:	f000 f920 	bl	80003d4 <millis>
 8000194:	4603      	mov	r3, r0
 8000196:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <led_init+0x28>)
 8000198:	6013      	str	r3, [r2, #0]
    s_led_mode = LED_MODE_NORMAL;
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <led_init+0x2c>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40011000 	.word	0x40011000
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	200000f8 	.word	0x200000f8

080001b0 <led_flash>:
}

// LED闪烁
// 参数：周期(ms)，点亮时间(ms)，闪烁次数(=0时一直闪烁)
void led_flash(uint16_t period, uint16_t pulse, uint16_t cycles)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	80fb      	strh	r3, [r7, #6]
 80001ba:	460b      	mov	r3, r1
 80001bc:	80bb      	strh	r3, [r7, #4]
 80001be:	4613      	mov	r3, r2
 80001c0:	807b      	strh	r3, [r7, #2]
    s_led_mode = LED_MODE_FLASH;
 80001c2:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <led_flash+0x4c>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	701a      	strb	r2, [r3, #0]
    s_led_period = period;
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <led_flash+0x50>)
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	8013      	strh	r3, [r2, #0]
    s_led_pulse = pulse;
 80001ce:	4a0d      	ldr	r2, [pc, #52]	; (8000204 <led_flash+0x54>)
 80001d0:	88bb      	ldrh	r3, [r7, #4]
 80001d2:	8013      	strh	r3, [r2, #0]
    s_led_cycle_cnt = cycles;
 80001d4:	4a0c      	ldr	r2, [pc, #48]	; (8000208 <led_flash+0x58>)
 80001d6:	887b      	ldrh	r3, [r7, #2]
 80001d8:	8013      	strh	r3, [r2, #0]
    s_led_timer = 0;
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <led_flash+0x5c>)
 80001dc:	2200      	movs	r2, #0
 80001de:	801a      	strh	r2, [r3, #0]
    s_led_last_time = millis();
 80001e0:	f000 f8f8 	bl	80003d4 <millis>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a0a      	ldr	r2, [pc, #40]	; (8000210 <led_flash+0x60>)
 80001e8:	6013      	str	r3, [r2, #0]
    LED_OFF();
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <led_flash+0x64>)
 80001ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001f0:	615a      	str	r2, [r3, #20]
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000f8 	.word	0x200000f8
 8000200:	20000102 	.word	0x20000102
 8000204:	20000104 	.word	0x20000104
 8000208:	20000106 	.word	0x20000106
 800020c:	20000100 	.word	0x20000100
 8000210:	200000fc 	.word	0x200000fc
 8000214:	40011000 	.word	0x40011000

08000218 <led_update>:

/*-----------------------------------*/

// LED定时任务
void led_update(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
    uint32_t t;

    switch (s_led_mode) {
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <led_update+0x9c>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d140      	bne.n	80002a8 <led_update+0x90>
    case LED_MODE_FLASH:
        t = millis();
 8000226:	f000 f8d5 	bl	80003d4 <millis>
 800022a:	6078      	str	r0, [r7, #4]
        s_led_timer += (t - s_led_last_time);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	b29a      	uxth	r2, r3
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <led_update+0xa0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	b29b      	uxth	r3, r3
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	b29a      	uxth	r2, r3
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <led_update+0xa4>)
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	4413      	add	r3, r2
 8000240:	b29a      	uxth	r2, r3
 8000242:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <led_update+0xa4>)
 8000244:	801a      	strh	r2, [r3, #0]
        s_led_last_time = t;
 8000246:	4a1c      	ldr	r2, [pc, #112]	; (80002b8 <led_update+0xa0>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6013      	str	r3, [r2, #0]
        if (s_led_timer >= s_led_pulse) {
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <led_update+0xa4>)
 800024e:	881a      	ldrh	r2, [r3, #0]
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <led_update+0xa8>)
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	429a      	cmp	r2, r3
 8000256:	d303      	bcc.n	8000260 <led_update+0x48>
            LED_OFF();
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <led_update+0xac>)
 800025a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800025e:	615a      	str	r2, [r3, #20]
        }
        if (s_led_timer >= s_led_period) {
 8000260:	4b16      	ldr	r3, [pc, #88]	; (80002bc <led_update+0xa4>)
 8000262:	881a      	ldrh	r2, [r3, #0]
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <led_update+0xb0>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d31f      	bcc.n	80002ac <led_update+0x94>
            if (s_led_cycle_cnt > 0) {
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <led_update+0xb4>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d011      	beq.n	8000298 <led_update+0x80>
                s_led_cycle_cnt--;
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <led_update+0xb4>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	b29a      	uxth	r2, r3
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <led_update+0xb4>)
 800027e:	801a      	strh	r2, [r3, #0]
                if (s_led_cycle_cnt == 0) {
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <led_update+0xb4>)
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d107      	bne.n	8000298 <led_update+0x80>
                    s_led_mode = LED_MODE_NORMAL;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <led_update+0x9c>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
                    LED_OFF();
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <led_update+0xac>)
 8000290:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000294:	615a      	str	r2, [r3, #20]
                    return;
 8000296:	e00a      	b.n	80002ae <led_update+0x96>
                }
            }
            s_led_timer = 0;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <led_update+0xa4>)
 800029a:	2200      	movs	r2, #0
 800029c:	801a      	strh	r2, [r3, #0]
            LED_ON();
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <led_update+0xac>)
 80002a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002a4:	611a      	str	r2, [r3, #16]
        }
        break;
 80002a6:	e001      	b.n	80002ac <led_update+0x94>
    default:
        break;
 80002a8:	bf00      	nop
 80002aa:	e000      	b.n	80002ae <led_update+0x96>
        break;
 80002ac:	bf00      	nop
    }
}
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	200000f8 	.word	0x200000f8
 80002b8:	200000fc 	.word	0x200000fc
 80002bc:	20000100 	.word	0x20000100
 80002c0:	20000104 	.word	0x20000104
 80002c4:	40011000 	.word	0x40011000
 80002c8:	20000102 	.word	0x20000102
 80002cc:	20000106 	.word	0x20000106

080002d0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80002dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	da0b      	bge.n	80002fc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	490c      	ldr	r1, [pc, #48]	; (800031c <NVIC_SetPriority+0x4c>)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f003 030f 	and.w	r3, r3, #15
 80002f0:	3b04      	subs	r3, #4
 80002f2:	0112      	lsls	r2, r2, #4
 80002f4:	b2d2      	uxtb	r2, r2
 80002f6:	440b      	add	r3, r1
 80002f8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80002fa:	e009      	b.n	8000310 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	4907      	ldr	r1, [pc, #28]	; (8000320 <NVIC_SetPriority+0x50>)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	440b      	add	r3, r1
 800030c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	e000e100 	.word	0xe000e100

08000324 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000332:	d301      	bcc.n	8000338 <SysTick_Config+0x14>
 8000334:	2301      	movs	r3, #1
 8000336:	e011      	b.n	800035c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <SysTick_Config+0x40>)
 8000340:	3b01      	subs	r3, #1
 8000342:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000344:	210f      	movs	r1, #15
 8000346:	f04f 30ff 	mov.w	r0, #4294967295
 800034a:	f7ff ffc1 	bl	80002d0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <SysTick_Config+0x40>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <SysTick_Config+0x40>)
 8000356:	2207      	movs	r2, #7
 8000358:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800035a:	2300      	movs	r3, #0
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	e000e010 	.word	0xe000e010

08000368 <SysTick_Handler>:

/*-----------------------------------*/

// SysTick中断
void SysTick_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    s_system_up_ms++;
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <SysTick_Handler+0x18>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	4a03      	ldr	r2, [pc, #12]	; (8000380 <SysTick_Handler+0x18>)
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	20000110 	.word	0x20000110

08000384 <timebase_init>:

/*-----------------------------------*/

// 初始化
void timebase_init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    // 1us时钟数
    s_us_ticks = SystemCoreClock / 1000000;
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <timebase_init+0x3c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <timebase_init+0x40>)
 800038e:	fba2 2303 	umull	r2, r3, r2, r3
 8000392:	0c9b      	lsrs	r3, r3, #18
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <timebase_init+0x44>)
 8000396:	6013      	str	r3, [r2, #0]
    // 1ms时钟数
    s_ms_ticks = SystemCoreClock / 1000;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <timebase_init+0x3c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <timebase_init+0x48>)
 800039e:	fba2 2303 	umull	r2, r3, r2, r3
 80003a2:	099b      	lsrs	r3, r3, #6
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <timebase_init+0x4c>)
 80003a6:	6013      	str	r3, [r2, #0]
    // 1ms时基中断
    SysTick_Config(s_ms_ticks);
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <timebase_init+0x4c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ffb9 	bl	8000324 <SysTick_Config>
    // 提高中断优先级，避免在其它中断中调用时计时出错
    NVIC_SetPriority(SysTick_IRQn, 0);
 80003b2:	2100      	movs	r1, #0
 80003b4:	f04f 30ff 	mov.w	r0, #4294967295
 80003b8:	f7ff ff8a 	bl	80002d0 <NVIC_SetPriority>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000004 	.word	0x20000004
 80003c4:	431bde83 	.word	0x431bde83
 80003c8:	20000108 	.word	0x20000108
 80003cc:	10624dd3 	.word	0x10624dd3
 80003d0:	2000010c 	.word	0x2000010c

080003d4 <millis>:
    return (ms * 1000) + (s_ms_ticks - cycle_cnt) / s_us_ticks;
}

// 返回系统启动毫秒数 (49天溢出)
uint32_t millis(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    return s_system_up_ms;
 80003d8:	4b02      	ldr	r3, [pc, #8]	; (80003e4 <millis+0x10>)
 80003da:	681b      	ldr	r3, [r3, #0]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	20000110 	.word	0x20000110

080003e8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d105      	bne.n	8000404 <Standard_GetConfiguration+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <Standard_GetConfiguration+0x34>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8000400:	2300      	movs	r3, #0
 8000402:	e006      	b.n	8000412 <Standard_GetConfiguration+0x2a>
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <Standard_GetConfiguration+0x38>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <Standard_GetConfiguration+0x34>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	330a      	adds	r3, #10
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200002b8 	.word	0x200002b8
 8000420:	200002b4 	.word	0x200002b4

08000424 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  if ((pInformation->USBwValue0 <=
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <Standard_SetConfiguration+0x44>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	78da      	ldrb	r2, [r3, #3]
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <Standard_SetConfiguration+0x48>)
 8000430:	785b      	ldrb	r3, [r3, #1]
  if ((pInformation->USBwValue0 <=
 8000432:	429a      	cmp	r2, r3
 8000434:	d815      	bhi.n	8000462 <Standard_SetConfiguration+0x3e>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <Standard_SetConfiguration+0x44>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	789b      	ldrb	r3, [r3, #2]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d110      	bne.n	8000462 <Standard_SetConfiguration+0x3e>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <Standard_SetConfiguration+0x44>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	889b      	ldrh	r3, [r3, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d10b      	bne.n	8000462 <Standard_SetConfiguration+0x3e>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <Standard_SetConfiguration+0x44>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <Standard_SetConfiguration+0x44>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	78d2      	ldrb	r2, [r2, #3]
 8000454:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <Standard_SetConfiguration+0x4c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4798      	blx	r3
    return USB_SUCCESS;
 800045e:	2300      	movs	r3, #0
 8000460:	e000      	b.n	8000464 <Standard_SetConfiguration+0x40>
  }
  else
  {
    return USB_UNSUPPORT;
 8000462:	2302      	movs	r3, #2
  }
}
 8000464:	4618      	mov	r0, r3
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200002b8 	.word	0x200002b8
 800046c:	20000054 	.word	0x20000054
 8000470:	200002b4 	.word	0x200002b4

08000474 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800047e:	88fb      	ldrh	r3, [r7, #6]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d105      	bne.n	8000490 <Standard_GetInterface+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <Standard_GetInterface+0x34>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2201      	movs	r2, #1
 800048a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800048c:	2300      	movs	r3, #0
 800048e:	e006      	b.n	800049e <Standard_GetInterface+0x2a>
  }
  pUser_Standard_Requests->User_GetInterface();
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <Standard_GetInterface+0x38>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <Standard_GetInterface+0x34>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	330c      	adds	r3, #12
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200002b8 	.word	0x200002b8
 80004ac:	200002b4 	.word	0x200002b4

080004b0 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <Standard_SetInterface+0x7c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <Standard_SetInterface+0x80>)
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	7950      	ldrb	r0, [r2, #5]
 80004c2:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <Standard_SetInterface+0x80>)
 80004c4:	6812      	ldr	r2, [r2, #0]
 80004c6:	78d2      	ldrb	r2, [r2, #3]
 80004c8:	4611      	mov	r1, r2
 80004ca:	4798      	blx	r3
 80004cc:	4603      	mov	r3, r0
 80004ce:	71fb      	strb	r3, [r7, #7]

  if (pInformation->Current_Configuration != 0)
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <Standard_SetInterface+0x80>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7a9b      	ldrb	r3, [r3, #10]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d023      	beq.n	8000522 <Standard_SetInterface+0x72>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d109      	bne.n	80004f4 <Standard_SetInterface+0x44>
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <Standard_SetInterface+0x80>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d104      	bne.n	80004f4 <Standard_SetInterface+0x44>
        || (pInformation->USBwValue1 != 0))
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <Standard_SetInterface+0x80>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <Standard_SetInterface+0x48>
    {
      return  USB_UNSUPPORT;
 80004f4:	2302      	movs	r3, #2
 80004f6:	e015      	b.n	8000524 <Standard_SetInterface+0x74>
    }
    else if (Re == USB_SUCCESS)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d111      	bne.n	8000522 <Standard_SetInterface+0x72>
    {
      pUser_Standard_Requests->User_SetInterface();
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <Standard_SetInterface+0x84>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <Standard_SetInterface+0x80>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <Standard_SetInterface+0x80>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	7952      	ldrb	r2, [r2, #5]
 8000510:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <Standard_SetInterface+0x80>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <Standard_SetInterface+0x80>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	78d2      	ldrb	r2, [r2, #3]
 800051c:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800051e:	2300      	movs	r3, #0
 8000520:	e000      	b.n	8000524 <Standard_SetInterface+0x74>
    }

  }

  return USB_UNSUPPORT;
 8000522:	2302      	movs	r3, #2
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000290 	.word	0x20000290
 8000530:	200002b8 	.word	0x200002b8
 8000534:	200002b4 	.word	0x200002b4

08000538 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d105      	bne.n	8000554 <Standard_GetStatus+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8000548:	4b46      	ldr	r3, [pc, #280]	; (8000664 <Standard_GetStatus+0x12c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2202      	movs	r2, #2
 800054e:	821a      	strh	r2, [r3, #16]
    return 0;
 8000550:	2300      	movs	r3, #0
 8000552:	e082      	b.n	800065a <Standard_GetStatus+0x122>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8000554:	4b44      	ldr	r3, [pc, #272]	; (8000668 <Standard_GetStatus+0x130>)
 8000556:	2200      	movs	r2, #0
 8000558:	801a      	strh	r2, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800055a:	4b42      	ldr	r3, [pc, #264]	; (8000664 <Standard_GetStatus+0x12c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000564:	2b00      	cmp	r3, #0
 8000566:	d12c      	bne.n	80005c2 <Standard_GetStatus+0x8a>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <Standard_GetStatus+0x12c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	7a5b      	ldrb	r3, [r3, #9]
 800056e:	737b      	strb	r3, [r7, #13]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8000570:	7b7b      	ldrb	r3, [r7, #13]
 8000572:	f003 0320 	and.w	r3, r3, #32
 8000576:	2b00      	cmp	r3, #0
 8000578:	d007      	beq.n	800058a <Standard_GetStatus+0x52>
    {
      SetBit(StatusInfo0, 1);
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <Standard_GetStatus+0x130>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b38      	ldr	r3, [pc, #224]	; (8000668 <Standard_GetStatus+0x130>)
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e006      	b.n	8000598 <Standard_GetStatus+0x60>
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <Standard_GetStatus+0x130>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f023 0302 	bic.w	r3, r3, #2
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <Standard_GetStatus+0x130>)
 8000596:	701a      	strb	r2, [r3, #0]
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8000598:	7b7b      	ldrb	r3, [r7, #13]
 800059a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d007      	beq.n	80005b2 <Standard_GetStatus+0x7a>
    {
      SetBit(StatusInfo0, 0);
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <Standard_GetStatus+0x130>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <Standard_GetStatus+0x130>)
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e04e      	b.n	8000650 <Standard_GetStatus+0x118>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <Standard_GetStatus+0x130>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <Standard_GetStatus+0x130>)
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e046      	b.n	8000650 <Standard_GetStatus+0x118>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <Standard_GetStatus+0x12c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d101      	bne.n	80005d4 <Standard_GetStatus+0x9c>
  {
    return (uint8_t *)&StatusInfo;
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <Standard_GetStatus+0x130>)
 80005d2:	e042      	b.n	800065a <Standard_GetStatus+0x122>
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <Standard_GetStatus+0x12c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d134      	bne.n	800064c <Standard_GetStatus+0x114>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <Standard_GetStatus+0x12c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	73fb      	strb	r3, [r7, #15]

    Related_Endpoint = (wIndex0 & 0x0f);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	73bb      	strb	r3, [r7, #14]
    if (ValBit(wIndex0, 7))
 80005f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	da13      	bge.n	8000622 <Standard_GetStatus+0xea>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000602:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800060e:	2b10      	cmp	r3, #16
 8000610:	d11e      	bne.n	8000650 <Standard_GetStatus+0x118>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <Standard_GetStatus+0x130>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <Standard_GetStatus+0x130>)
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	e016      	b.n	8000650 <Standard_GetStatus+0x118>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800062a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800063a:	d109      	bne.n	8000650 <Standard_GetStatus+0x118>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <Standard_GetStatus+0x130>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <Standard_GetStatus+0x130>)
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e001      	b.n	8000650 <Standard_GetStatus+0x118>
    }

  }
  else
  {
    return NULL;
 800064c:	2300      	movs	r3, #0
 800064e:	e004      	b.n	800065a <Standard_GetStatus+0x122>
  }
  pUser_Standard_Requests->User_GetStatus();
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <Standard_GetStatus+0x134>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <Standard_GetStatus+0x130>)
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200002b8 	.word	0x200002b8
 8000668:	20000288 	.word	0x20000288
 800066c:	200002b4 	.word	0x200002b4

08000670 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
  uint32_t     Type_Rec = Type_Recipient;
 8000676:	4b6f      	ldr	r3, [pc, #444]	; (8000834 <Standard_ClearFeature+0x1c4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000680:	613b      	str	r3, [r7, #16]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10a      	bne.n	800069e <Standard_ClearFeature+0x2e>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8000688:	4b6a      	ldr	r3, [pc, #424]	; (8000834 <Standard_ClearFeature+0x1c4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	7a5a      	ldrb	r2, [r3, #9]
 800068e:	4b69      	ldr	r3, [pc, #420]	; (8000834 <Standard_ClearFeature+0x1c4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f022 0220 	bic.w	r2, r2, #32
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800069a:	2300      	movs	r3, #0
 800069c:	e0c6      	b.n	800082c <Standard_ClearFeature+0x1bc>
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	f040 80c2 	bne.w	800082a <Standard_ClearFeature+0x1ba>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80006a6:	4b63      	ldr	r3, [pc, #396]	; (8000834 <Standard_ClearFeature+0x1c4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d104      	bne.n	80006ba <Standard_ClearFeature+0x4a>
        || (pInformation->USBwIndex1 != 0))
 80006b0:	4b60      	ldr	r3, [pc, #384]	; (8000834 <Standard_ClearFeature+0x1c4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <Standard_ClearFeature+0x4e>
    {
      return USB_UNSUPPORT;
 80006ba:	2302      	movs	r3, #2
 80006bc:	e0b6      	b.n	800082c <Standard_ClearFeature+0x1bc>
    }

    pDev = &Device_Table;
 80006be:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <Standard_ClearFeature+0x1c8>)
 80006c0:	60fb      	str	r3, [r7, #12]
    wIndex0 = pInformation->USBwIndex0;
 80006c2:	4b5c      	ldr	r3, [pc, #368]	; (8000834 <Standard_ClearFeature+0x1c4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	60bb      	str	r3, [r7, #8]
    rEP = wIndex0 & ~0x80;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006d0:	607b      	str	r3, [r7, #4]
    Related_Endpoint = ENDP0 + rEP;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
 80006d6:	4b57      	ldr	r3, [pc, #348]	; (8000834 <Standard_ClearFeature+0x1c4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da0b      	bge.n	80006fa <Standard_ClearFeature+0x8a>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006ea:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	e00a      	b.n	8000710 <Standard_ClearFeature+0xa0>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000702:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800070e:	617b      	str	r3, [r7, #20]
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4293      	cmp	r3, r2
 800071a:	d207      	bcs.n	800072c <Standard_ClearFeature+0xbc>
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <Standard_ClearFeature+0xbc>
        || (pInformation->Current_Configuration == 0))
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <Standard_ClearFeature+0x1c4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7a9b      	ldrb	r3, [r3, #10]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <Standard_ClearFeature+0xc0>
    {
      return USB_UNSUPPORT;
 800072c:	2302      	movs	r3, #2
 800072e:	e07d      	b.n	800082c <Standard_ClearFeature+0x1bc>
    }


    if (wIndex0 & 0x80)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	2b00      	cmp	r3, #0
 8000738:	d017      	beq.n	800076a <Standard_ClearFeature+0xfa>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000742:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800074e:	2b10      	cmp	r3, #16
 8000750:	d165      	bne.n	800081e <Standard_ClearFeature+0x1ae>
      {
        ClearDTOG_TX(Related_Endpoint);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fa28 	bl	8001bac <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2130      	movs	r1, #48	; 0x30
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f8c4 	bl	80018f0 <SetEPTxStatus>
 8000768:	e059      	b.n	800081e <Standard_ClearFeature+0x1ae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000772:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800077e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000782:	d14c      	bne.n	800081e <Standard_ClearFeature+0x1ae>
      {
        if (Related_Endpoint == ENDP0)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d127      	bne.n	80007da <Standard_ClearFeature+0x16a>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <Standard_ClearFeature+0x1cc>)
 8000790:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000794:	b292      	uxth	r2, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fac9 	bl	8001d30 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007a6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007b6:	b29c      	uxth	r4, r3
 80007b8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80007bc:	b29c      	uxth	r4, r3
 80007be:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80007c2:	b29c      	uxth	r4, r3
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <Standard_ClearFeature+0x1d0>)
 80007c6:	4323      	orrs	r3, r4
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007d2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	e021      	b.n	800081e <Standard_ClearFeature+0x1ae>
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f9b7 	bl	8001b52 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007ec:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007fc:	b29c      	uxth	r4, r3
 80007fe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8000802:	b29c      	uxth	r4, r3
 8000804:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8000808:	b29c      	uxth	r4, r3
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <Standard_ClearFeature+0x1d0>)
 800080c:	4323      	orrs	r3, r4
 800080e:	b29a      	uxth	r2, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000818:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800081c:	601a      	str	r2, [r3, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <Standard_ClearFeature+0x1d4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	4798      	blx	r3
    return USB_SUCCESS;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <Standard_ClearFeature+0x1bc>
  }

  return USB_UNSUPPORT;
 800082a:	2302      	movs	r3, #2
}
 800082c:	4618      	mov	r0, r3
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	200002b8 	.word	0x200002b8
 8000838:	20000054 	.word	0x20000054
 800083c:	20000058 	.word	0x20000058
 8000840:	ffff8080 	.word	0xffff8080
 8000844:	200002b4 	.word	0x200002b4

08000848 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <Standard_SetEndPointFeature+0x104>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	795b      	ldrb	r3, [r3, #5]
 8000854:	60bb      	str	r3, [r7, #8]
  rEP = wIndex0 & ~0x80;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800085c:	607b      	str	r3, [r7, #4]
  Related_Endpoint = ENDP0 + rEP;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <Standard_SetEndPointFeature+0x104>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	795b      	ldrb	r3, [r3, #5]
 8000868:	b25b      	sxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	da0b      	bge.n	8000886 <Standard_SetEndPointFeature+0x3e>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000876:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e00a      	b.n	800089c <Standard_SetEndPointFeature+0x54>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800088e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800089a:	60fb      	str	r3, [r7, #12]
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <Standard_SetEndPointFeature+0x108>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d20c      	bcs.n	80008c2 <Standard_SetEndPointFeature+0x7a>
      || pInformation->USBwValue != 0 || Status == 0
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <Standard_SetEndPointFeature+0x104>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	885b      	ldrh	r3, [r3, #2]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d107      	bne.n	80008c2 <Standard_SetEndPointFeature+0x7a>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d004      	beq.n	80008c2 <Standard_SetEndPointFeature+0x7a>
      || pInformation->Current_Configuration == 0)
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <Standard_SetEndPointFeature+0x104>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7a9b      	ldrb	r3, [r3, #10]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <Standard_SetEndPointFeature+0x7e>
  {
    return USB_UNSUPPORT;
 80008c2:	2302      	movs	r3, #2
 80008c4:	e03e      	b.n	8000944 <Standard_SetEndPointFeature+0xfc>
  }
  else
  {
    if (wIndex0 & 0x80)
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d01a      	beq.n	8000906 <Standard_SetEndPointFeature+0xbe>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008d8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008e8:	b29c      	uxth	r4, r3
 80008ea:	f084 0310 	eor.w	r3, r4, #16
 80008ee:	b29c      	uxth	r4, r3
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <Standard_SetEndPointFeature+0x10c>)
 80008f2:	4323      	orrs	r3, r4
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008fe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	e019      	b.n	800093a <Standard_SetEndPointFeature+0xf2>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800090e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800091a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800091e:	b29c      	uxth	r4, r3
 8000920:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8000924:	b29c      	uxth	r4, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <Standard_SetEndPointFeature+0x10c>)
 8000928:	4323      	orrs	r3, r4
 800092a:	b29a      	uxth	r2, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000934:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000938:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <Standard_SetEndPointFeature+0x110>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4798      	blx	r3
  return USB_SUCCESS;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	200002b8 	.word	0x200002b8
 8000950:	20000054 	.word	0x20000054
 8000954:	ffff8080 	.word	0xffff8080
 8000958:	200002b4 	.word	0x200002b4

0800095c <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  SetBit(pInformation->Current_Feature, 5);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <Standard_SetDeviceFeature+0x24>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	7a5a      	ldrb	r2, [r3, #9]
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <Standard_SetDeviceFeature+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0220 	orr.w	r2, r2, #32
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <Standard_SetDeviceFeature+0x28>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	4798      	blx	r3
  return USB_SUCCESS;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200002b8 	.word	0x200002b8
 8000984:	200002b4 	.word	0x200002b4

08000988 <Standard_GetDescriptorData>:
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	80fb      	strh	r3, [r7, #6]
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <Standard_GetDescriptorData+0x44>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	8a5b      	ldrh	r3, [r3, #18]
 800099a:	60fb      	str	r3, [r7, #12]
  if (Length == 0)
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10a      	bne.n	80009b8 <Standard_GetDescriptorData+0x30>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	8899      	ldrh	r1, [r3, #4]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <Standard_GetDescriptorData+0x44>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1a8a      	subs	r2, r1, r2
 80009b0:	b292      	uxth	r2, r2
 80009b2:	821a      	strh	r2, [r3, #16]
    return 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	e003      	b.n	80009c0 <Standard_GetDescriptorData+0x38>
  }

  return pDesc->Descriptor + wOffset;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200002b8 	.word	0x200002b8

080009d0 <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80009d6:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <DataStageOut+0xf0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3310      	adds	r3, #16
 80009dc:	60bb      	str	r3, [r7, #8]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	607b      	str	r3, [r7, #4]

  if (pEPinfo->CopyData && save_rLength)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02d      	beq.n	8000a48 <DataStageOut+0x78>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d02a      	beq.n	8000a48 <DataStageOut+0x78>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	889b      	ldrh	r3, [r3, #4]
 80009f6:	60fb      	str	r3, [r7, #12]
    if (Length > save_rLength)
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d901      	bls.n	8000a04 <DataStageOut+0x34>
    {
      Length = save_rLength;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	b292      	uxth	r2, r2
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	4798      	blx	r3
 8000a10:	6038      	str	r0, [r7, #0]
    pEPinfo->Usb_rLength -= Length;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	801a      	strh	r2, [r3, #0]
    pEPinfo->Usb_rOffset += Length;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	885a      	ldrh	r2, [r3, #2]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	805a      	strh	r2, [r3, #2]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 f944 	bl	8001cc0 <GetEPRxAddr>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	6838      	ldr	r0, [r7, #0]
 8000a44:	f000 fedb 	bl	80017fe <PMAToUserBufferCopy>

  }

  if (pEPinfo->Usb_rLength != 0)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00a      	beq.n	8000a66 <DataStageOut+0x96>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <DataStageOut+0xf4>)
 8000a52:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a56:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 f94a 	bl	8001cf4 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <DataStageOut+0xf8>)
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	889b      	ldrh	r3, [r3, #4]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d304      	bcc.n	8000a7c <DataStageOut+0xac>
  {
    pInformation->ControlState = OUT_DATA;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <DataStageOut+0xf0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2203      	movs	r2, #3
 8000a78:	721a      	strb	r2, [r3, #8]
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
    }
  }
}
 8000a7a:	e01d      	b.n	8000ab8 <DataStageOut+0xe8>
    if (pEPinfo->Usb_rLength > 0)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <DataStageOut+0xbe>
      pInformation->ControlState = LAST_OUT_DATA;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <DataStageOut+0xf0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2205      	movs	r2, #5
 8000a8a:	721a      	strb	r2, [r3, #8]
}
 8000a8c:	e014      	b.n	8000ab8 <DataStageOut+0xe8>
    else if (pEPinfo->Usb_rLength == 0)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d110      	bne.n	8000ab8 <DataStageOut+0xe8>
      pInformation->ControlState = WAIT_STATUS_IN;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <DataStageOut+0xf0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2206      	movs	r2, #6
 8000a9c:	721a      	strb	r2, [r3, #8]
      USB_StatusIn();
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <DataStageOut+0xfc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <DataStageOut+0x100>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	461a      	mov	r2, r3
 8000aae:	2300      	movs	r3, #0
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <DataStageOut+0xf8>)
 8000ab4:	2230      	movs	r2, #48	; 0x30
 8000ab6:	801a      	strh	r2, [r3, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002b8 	.word	0x200002b8
 8000ac4:	200002be 	.word	0x200002be
 8000ac8:	200002c0 	.word	0x200002c0
 8000acc:	40005c50 	.word	0x40005c50
 8000ad0:	20003002 	.word	0x20003002

08000ad4 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <DataStageIn+0xf4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3310      	adds	r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	60bb      	str	r3, [r7, #8]
  uint32_t ControlState = pInformation->ControlState;
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <DataStageIn+0xf4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	7a1b      	ldrb	r3, [r3, #8]
 8000aee:	617b      	str	r3, [r7, #20]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d11f      	bne.n	8000b36 <DataStageIn+0x62>
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d11c      	bne.n	8000b36 <DataStageIn+0x62>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <DataStageIn+0xf8>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d112      	bne.n	8000b2a <DataStageIn+0x56>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <DataStageIn+0xfc>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <DataStageIn+0x100>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	461a      	mov	r2, r3
 8000b14:	2300      	movs	r3, #0
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <DataStageIn+0x104>)
 8000b1a:	2230      	movs	r2, #48	; 0x30
 8000b1c:	801a      	strh	r2, [r3, #0]
      ControlState = LAST_IN_DATA;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	617b      	str	r3, [r7, #20]
      Data_Mul_MaxPacketSize = FALSE;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <DataStageIn+0xf8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 
    }
    
    goto Expect_Status_Out;
 8000b28:	e045      	b.n	8000bb6 <DataStageIn+0xe2>
      ControlState = WAIT_STATUS_OUT;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	617b      	str	r3, [r7, #20]
      vSetEPTxStatus(EP_TX_STALL);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <DataStageIn+0x104>)
 8000b30:	2210      	movs	r2, #16
 8000b32:	801a      	strh	r2, [r3, #0]
    goto Expect_Status_Out;
 8000b34:	e03f      	b.n	8000bb6 <DataStageIn+0xe2>
  }

  Length = pEPinfo->PacketSize;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	889b      	ldrh	r3, [r3, #4]
 8000b3a:	613b      	str	r3, [r7, #16]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d801      	bhi.n	8000b48 <DataStageIn+0x74>
 8000b44:	2304      	movs	r3, #4
 8000b46:	e000      	b.n	8000b4a <DataStageIn+0x76>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	617b      	str	r3, [r7, #20]

  if (Length > save_wLength)
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d901      	bls.n	8000b58 <DataStageIn+0x84>
  {
    Length = save_wLength;
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	613b      	str	r3, [r7, #16]
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	4610      	mov	r0, r2
 8000b62:	4798      	blx	r3
 8000b64:	6078      	str	r0, [r7, #4]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f001 f890 	bl	8001c8c <GetEPTxAddr>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fe06 	bl	8001788 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	2000      	movs	r0, #0
 8000b84:	f001 f8b6 	bl	8001cf4 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	801a      	strh	r2, [r3, #0]
  pEPinfo->Usb_wOffset += Length;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	885a      	ldrh	r2, [r3, #2]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	805a      	strh	r2, [r3, #2]
  vSetEPTxStatus(EP_TX_VALID);
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <DataStageIn+0x104>)
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <DataStageIn+0x108>)
 8000bb0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bb4:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <DataStageIn+0xf4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	721a      	strb	r2, [r3, #8]
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200002b8 	.word	0x200002b8
 8000bcc:	20000114 	.word	0x20000114
 8000bd0:	40005c50 	.word	0x40005c50
 8000bd4:	20003002 	.word	0x20003002
 8000bd8:	200002c0 	.word	0x200002c0
 8000bdc:	200002be 	.word	0x200002be

08000be0 <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
  RESULT Result = USB_UNSUPPORT;
 8000be6:	2302      	movs	r3, #2
 8000be8:	73fb      	strb	r3, [r7, #15]
  uint32_t RequestNo = pInformation->USBbRequest;
 8000bea:	4b5d      	ldr	r3, [pc, #372]	; (8000d60 <NoData_Setup0+0x180>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	785b      	ldrb	r3, [r3, #1]
 8000bf0:	607b      	str	r3, [r7, #4]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <NoData_Setup0+0x180>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d156      	bne.n	8000cae <NoData_Setup0+0xce>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	d104      	bne.n	8000c10 <NoData_Setup0+0x30>
    {
      Result = Standard_SetConfiguration();
 8000c06:	f7ff fc0d 	bl	8000424 <Standard_SetConfiguration>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e076      	b.n	8000cfe <NoData_Setup0+0x11e>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d11a      	bne.n	8000c4c <NoData_Setup0+0x6c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8000c16:	4b52      	ldr	r3, [pc, #328]	; (8000d60 <NoData_Setup0+0x180>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	78db      	ldrb	r3, [r3, #3]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0e      	blt.n	8000c40 <NoData_Setup0+0x60>
 8000c22:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <NoData_Setup0+0x180>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d109      	bne.n	8000c40 <NoData_Setup0+0x60>
          || (pInformation->USBwIndex != 0)
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <NoData_Setup0+0x180>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	889b      	ldrh	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <NoData_Setup0+0x60>
          || (pInformation->Current_Configuration != 0))
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <NoData_Setup0+0x180>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	7a9b      	ldrb	r3, [r3, #10]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <NoData_Setup0+0x66>
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8000c40:	2308      	movs	r3, #8
 8000c42:	60bb      	str	r3, [r7, #8]
        goto exit_NoData_Setup0;
 8000c44:	e082      	b.n	8000d4c <NoData_Setup0+0x16c>
      }
      else
      {
        Result = USB_SUCCESS;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e058      	b.n	8000cfe <NoData_Setup0+0x11e>
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d111      	bne.n	8000c76 <NoData_Setup0+0x96>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8000c52:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <NoData_Setup0+0x180>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	78db      	ldrb	r3, [r3, #3]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d109      	bne.n	8000c70 <NoData_Setup0+0x90>
          && (pInformation->USBwIndex == 0))
 8000c5c:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <NoData_Setup0+0x180>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	889b      	ldrh	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d104      	bne.n	8000c70 <NoData_Setup0+0x90>
      {
        Result = Standard_SetDeviceFeature();
 8000c66:	f7ff fe79 	bl	800095c <Standard_SetDeviceFeature>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e046      	b.n	8000cfe <NoData_Setup0+0x11e>
      }
      else
      {
        Result = USB_UNSUPPORT;
 8000c70:	2302      	movs	r3, #2
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e043      	b.n	8000cfe <NoData_Setup0+0x11e>
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d140      	bne.n	8000cfe <NoData_Setup0+0x11e>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8000c7c:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <NoData_Setup0+0x180>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d110      	bne.n	8000ca8 <NoData_Setup0+0xc8>
          && pInformation->USBwIndex == 0
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <NoData_Setup0+0x180>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	889b      	ldrh	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <NoData_Setup0+0xc8>
          && ValBit(pInformation->Current_Feature, 5))
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <NoData_Setup0+0x180>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	7a5b      	ldrb	r3, [r3, #9]
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <NoData_Setup0+0xc8>
      {
        Result = Standard_ClearFeature();
 8000c9e:	f7ff fce7 	bl	8000670 <Standard_ClearFeature>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e02a      	b.n	8000cfe <NoData_Setup0+0x11e>
      }
      else
      {
        Result = USB_UNSUPPORT;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e027      	b.n	8000cfe <NoData_Setup0+0x11e>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <NoData_Setup0+0x180>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d107      	bne.n	8000ccc <NoData_Setup0+0xec>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b0b      	cmp	r3, #11
 8000cc0:	d11d      	bne.n	8000cfe <NoData_Setup0+0x11e>
    {
      Result = Standard_SetInterface();
 8000cc2:	f7ff fbf5 	bl	80004b0 <Standard_SetInterface>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e018      	b.n	8000cfe <NoData_Setup0+0x11e>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <NoData_Setup0+0x180>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d10f      	bne.n	8000cfa <NoData_Setup0+0x11a>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d104      	bne.n	8000cea <NoData_Setup0+0x10a>
    {
      Result = Standard_ClearFeature();
 8000ce0:	f7ff fcc6 	bl	8000670 <Standard_ClearFeature>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e009      	b.n	8000cfe <NoData_Setup0+0x11e>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d106      	bne.n	8000cfe <NoData_Setup0+0x11e>
    {
      Result = Standard_SetEndPointFeature();
 8000cf0:	f7ff fdaa 	bl	8000848 <Standard_SetEndPointFeature>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <NoData_Setup0+0x11e>
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }


  if (Result != USB_SUCCESS)
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00e      	beq.n	8000d22 <NoData_Setup0+0x142>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <NoData_Setup0+0x184>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4798      	blx	r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
    if (Result == USB_NOT_READY)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d102      	bne.n	8000d22 <NoData_Setup0+0x142>
    {
      ControlState = PAUSE;
 8000d1c:	2309      	movs	r3, #9
 8000d1e:	60bb      	str	r3, [r7, #8]
      goto exit_NoData_Setup0;
 8000d20:	e014      	b.n	8000d4c <NoData_Setup0+0x16c>
    }
  }

  if (Result != USB_SUCCESS)
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <NoData_Setup0+0x14e>
  {
    ControlState = STALLED;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	60bb      	str	r3, [r7, #8]
    goto exit_NoData_Setup0;
 8000d2c:	e00e      	b.n	8000d4c <NoData_Setup0+0x16c>
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8000d2e:	2306      	movs	r3, #6
 8000d30:	60bb      	str	r3, [r7, #8]

  USB_StatusIn();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <NoData_Setup0+0x188>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <NoData_Setup0+0x18c>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	461a      	mov	r2, r3
 8000d42:	2300      	movs	r3, #0
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <NoData_Setup0+0x190>)
 8000d48:	2230      	movs	r2, #48	; 0x30
 8000d4a:	801a      	strh	r2, [r3, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <NoData_Setup0+0x180>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	721a      	strb	r2, [r3, #8]
  return;
 8000d56:	bf00      	nop
}
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002b8 	.word	0x200002b8
 8000d64:	20000290 	.word	0x20000290
 8000d68:	40005c50 	.word	0x40005c50
 8000d6c:	20003002 	.word	0x20003002
 8000d70:	200002c0 	.word	0x200002c0

08000d74 <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8000d7a:	4b94      	ldr	r3, [pc, #592]	; (8000fcc <Data_Setup0+0x258>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	61bb      	str	r3, [r7, #24]
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  wOffset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b06      	cmp	r3, #6
 8000d8e:	d124      	bne.n	8000dda <Data_Setup0+0x66>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000d90:	4b8e      	ldr	r3, [pc, #568]	; (8000fcc <Data_Setup0+0x258>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80d4 	bne.w	8000f48 <Data_Setup0+0x1d4>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8000da0:	4b8a      	ldr	r3, [pc, #552]	; (8000fcc <Data_Setup0+0x258>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
 8000da6:	72fb      	strb	r3, [r7, #11]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d104      	bne.n	8000db8 <Data_Setup0+0x44>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8000dae:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <Data_Setup0+0x25c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
 8000db6:	e0c7      	b.n	8000f48 <Data_Setup0+0x1d4>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8000db8:	7afb      	ldrb	r3, [r7, #11]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d104      	bne.n	8000dc8 <Data_Setup0+0x54>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8000dbe:	4b84      	ldr	r3, [pc, #528]	; (8000fd0 <Data_Setup0+0x25c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc6:	e0bf      	b.n	8000f48 <Data_Setup0+0x1d4>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	f040 80bc 	bne.w	8000f48 <Data_Setup0+0x1d4>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8000dd0:	4b7f      	ldr	r3, [pc, #508]	; (8000fd0 <Data_Setup0+0x25c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd8:	e0b6      	b.n	8000f48 <Data_Setup0+0x1d4>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d178      	bne.n	8000ed2 <Data_Setup0+0x15e>
 8000de0:	4b7a      	ldr	r3, [pc, #488]	; (8000fcc <Data_Setup0+0x258>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	885b      	ldrh	r3, [r3, #2]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d173      	bne.n	8000ed2 <Data_Setup0+0x15e>
           && (pInformation->USBwLength == 0x0002)
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <Data_Setup0+0x258>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	88db      	ldrh	r3, [r3, #6]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d16e      	bne.n	8000ed2 <Data_Setup0+0x15e>
           && (pInformation->USBwIndex1 == 0))
 8000df4:	4b75      	ldr	r3, [pc, #468]	; (8000fcc <Data_Setup0+0x258>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d169      	bne.n	8000ed2 <Data_Setup0+0x15e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000dfe:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <Data_Setup0+0x258>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d107      	bne.n	8000e1c <Data_Setup0+0xa8>
        && (pInformation->USBwIndex == 0))
 8000e0c:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <Data_Setup0+0x258>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <Data_Setup0+0xa8>
    {
      CopyRoutine = Standard_GetStatus;
 8000e16:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <Data_Setup0+0x260>)
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000e1a:	e094      	b.n	8000f46 <Data_Setup0+0x1d2>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <Data_Setup0+0x258>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d114      	bne.n	8000e54 <Data_Setup0+0xe0>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8000e2a:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <Data_Setup0+0x25c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a66      	ldr	r2, [pc, #408]	; (8000fcc <Data_Setup0+0x258>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	7952      	ldrb	r2, [r2, #5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4798      	blx	r3
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8081 	bne.w	8000f46 <Data_Setup0+0x1d2>
          && (pInformation->Current_Configuration != 0))
 8000e44:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <Data_Setup0+0x258>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	7a9b      	ldrb	r3, [r3, #10]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d07b      	beq.n	8000f46 <Data_Setup0+0x1d2>
      {
        CopyRoutine = Standard_GetStatus;
 8000e4e:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <Data_Setup0+0x260>)
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000e52:	e078      	b.n	8000f46 <Data_Setup0+0x1d2>
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8000e54:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <Data_Setup0+0x258>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d171      	bne.n	8000f46 <Data_Setup0+0x1d2>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8000e62:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <Data_Setup0+0x258>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	f003 030f 	and.w	r3, r3, #15
 8000e6c:	613b      	str	r3, [r7, #16]
      Reserved = pInformation->USBwIndex0 & 0x70;
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <Data_Setup0+0x258>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e78:	60fb      	str	r3, [r7, #12]

      if (ValBit(pInformation->USBwIndex0, 7))
 8000e7a:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <Data_Setup0+0x258>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da0b      	bge.n	8000e9e <Data_Setup0+0x12a>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e8e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e00a      	b.n	8000eb4 <Data_Setup0+0x140>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ea6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000eb2:	61fb      	str	r3, [r7, #28]
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8000eb4:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <Data_Setup0+0x264>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d242      	bcs.n	8000f46 <Data_Setup0+0x1d2>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d13f      	bne.n	8000f46 <Data_Setup0+0x1d2>
          && (Status != 0))
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d03c      	beq.n	8000f46 <Data_Setup0+0x1d2>
      {
        CopyRoutine = Standard_GetStatus;
 8000ecc:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <Data_Setup0+0x260>)
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000ed0:	e039      	b.n	8000f46 <Data_Setup0+0x1d2>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d109      	bne.n	8000eec <Data_Setup0+0x178>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <Data_Setup0+0x258>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d130      	bne.n	8000f48 <Data_Setup0+0x1d4>
    {
      CopyRoutine = Standard_GetConfiguration;
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <Data_Setup0+0x268>)
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	e02d      	b.n	8000f48 <Data_Setup0+0x1d4>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d12a      	bne.n	8000f48 <Data_Setup0+0x1d4>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <Data_Setup0+0x258>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d123      	bne.n	8000f48 <Data_Setup0+0x1d4>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <Data_Setup0+0x258>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7a9b      	ldrb	r3, [r3, #10]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01e      	beq.n	8000f48 <Data_Setup0+0x1d4>
 8000f0a:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <Data_Setup0+0x258>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	885b      	ldrh	r3, [r3, #2]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d119      	bne.n	8000f48 <Data_Setup0+0x1d4>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <Data_Setup0+0x258>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	791b      	ldrb	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d114      	bne.n	8000f48 <Data_Setup0+0x1d4>
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <Data_Setup0+0x258>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	88db      	ldrh	r3, [r3, #6]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d10f      	bne.n	8000f48 <Data_Setup0+0x1d4>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <Data_Setup0+0x25c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <Data_Setup0+0x258>)
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	7952      	ldrb	r2, [r2, #5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	4610      	mov	r0, r2
 8000f38:	4798      	blx	r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d103      	bne.n	8000f48 <Data_Setup0+0x1d4>
    {
      CopyRoutine = Standard_GetInterface;
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <Data_Setup0+0x26c>)
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	e000      	b.n	8000f48 <Data_Setup0+0x1d4>
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000f46:	bf00      	nop
    }

  }
  
  if (CopyRoutine)
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00f      	beq.n	8000f6e <Data_Setup0+0x1fa>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <Data_Setup0+0x258>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	b292      	uxth	r2, r2
 8000f56:	825a      	strh	r2, [r3, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <Data_Setup0+0x258>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5e:	619a      	str	r2, [r3, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	2000      	movs	r0, #0
 8000f64:	4798      	blx	r3
    Result = USB_SUCCESS;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f6c:	e013      	b.n	8000f96 <Data_Setup0+0x222>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <Data_Setup0+0x25c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <Data_Setup0+0x258>)
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	7852      	ldrb	r2, [r2, #1]
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4798      	blx	r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (Result == USB_NOT_READY)
 8000f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d104      	bne.n	8000f96 <Data_Setup0+0x222>
    {
      pInformation->ControlState = PAUSE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <Data_Setup0+0x258>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2209      	movs	r2, #9
 8000f92:	721a      	strb	r2, [r3, #8]
      return;
 8000f94:	e078      	b.n	8001088 <Data_Setup0+0x314>
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <Data_Setup0+0x258>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	8a1b      	ldrh	r3, [r3, #16]
 8000f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d104      	bne.n	8000fae <Data_Setup0+0x23a>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <Data_Setup0+0x258>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2209      	movs	r2, #9
 8000faa:	721a      	strb	r2, [r3, #8]
    return;
 8000fac:	e06c      	b.n	8001088 <Data_Setup0+0x314>
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8000fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d004      	beq.n	8000fc0 <Data_Setup0+0x24c>
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <Data_Setup0+0x258>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	8a1b      	ldrh	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d111      	bne.n	8000fe4 <Data_Setup0+0x270>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <Data_Setup0+0x258>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	721a      	strb	r2, [r3, #8]
    return;
 8000fc8:	e05e      	b.n	8001088 <Data_Setup0+0x314>
 8000fca:	bf00      	nop
 8000fcc:	200002b8 	.word	0x200002b8
 8000fd0:	20000290 	.word	0x20000290
 8000fd4:	08000539 	.word	0x08000539
 8000fd8:	20000054 	.word	0x20000054
 8000fdc:	080003e9 	.word	0x080003e9
 8000fe0:	08000475 	.word	0x08000475
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <Data_Setup0+0x31c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da42      	bge.n	8001076 <Data_Setup0+0x302>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <Data_Setup0+0x31c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	88db      	ldrh	r3, [r3, #6]
 8000ff6:	607b      	str	r3, [r7, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <Data_Setup0+0x31c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	8a1b      	ldrh	r3, [r3, #16]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d905      	bls.n	8001012 <Data_Setup0+0x29e>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <Data_Setup0+0x31c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	b292      	uxth	r2, r2
 800100e:	821a      	strh	r2, [r3, #16]
 8001010:	e026      	b.n	8001060 <Data_Setup0+0x2ec>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <Data_Setup0+0x31c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	8a1a      	ldrh	r2, [r3, #16]
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <Data_Setup0+0x31c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	88db      	ldrh	r3, [r3, #6]
 800101e:	429a      	cmp	r2, r3
 8001020:	d21e      	bcs.n	8001060 <Data_Setup0+0x2ec>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <Data_Setup0+0x31c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	8a1a      	ldrh	r2, [r3, #16]
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <Data_Setup0+0x320>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001030:	b29b      	uxth	r3, r3
 8001032:	429a      	cmp	r2, r3
 8001034:	d203      	bcs.n	800103e <Data_Setup0+0x2ca>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <Data_Setup0+0x324>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e010      	b.n	8001060 <Data_Setup0+0x2ec>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <Data_Setup0+0x31c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	8a1b      	ldrh	r3, [r3, #16]
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <Data_Setup0+0x320>)
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800104c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001050:	fb02 f201 	mul.w	r2, r2, r1
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <Data_Setup0+0x2ec>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <Data_Setup0+0x324>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <Data_Setup0+0x320>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <Data_Setup0+0x31c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001070:	f7ff fd30 	bl	8000ad4 <DataStageIn>
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
  }

  return;
 8001074:	e007      	b.n	8001086 <Data_Setup0+0x312>
    pInformation->ControlState = OUT_DATA;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <Data_Setup0+0x31c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2203      	movs	r2, #3
 800107c:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <Data_Setup0+0x328>)
 8001080:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001084:	801a      	strh	r2, [r3, #0]
  return;
 8001086:	bf00      	nop
}
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002b8 	.word	0x200002b8
 8001094:	20000290 	.word	0x20000290
 8001098:	20000114 	.word	0x20000114
 800109c:	200002be 	.word	0x200002be

080010a0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  union
  {
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	80fb      	strh	r3, [r7, #6]
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <Setup0_Process+0xcc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <Setup0_Process+0xd0>)
 80010b4:	4413      	add	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010c2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80010c6:	603b      	str	r3, [r7, #0]

  if (pInformation->ControlState != PAUSE)
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <Setup0_Process+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7a1b      	ldrb	r3, [r3, #8]
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	d037      	beq.n	8001142 <Setup0_Process+0xa2>
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	603a      	str	r2, [r7, #0]
 80010d8:	4a26      	ldr	r2, [pc, #152]	; (8001174 <Setup0_Process+0xd4>)
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	7013      	strb	r3, [r2, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	603a      	str	r2, [r7, #0]
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <Setup0_Process+0xd4>)
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	7053      	strb	r3, [r2, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	603b      	str	r3, [r7, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	1c9a      	adds	r2, r3, #2
 80010fc:	603a      	str	r2, [r7, #0]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <Setup0_Process+0xd4>)
 8001102:	6814      	ldr	r4, [r2, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 ffa5 	bl	8002054 <ByteSwap>
 800110a:	4603      	mov	r3, r0
 800110c:	8063      	strh	r3, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	603b      	str	r3, [r7, #0]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	1c9a      	adds	r2, r3, #2
 800111c:	603a      	str	r2, [r7, #0]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <Setup0_Process+0xd4>)
 8001122:	6814      	ldr	r4, [r2, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 ff95 	bl	8002054 <ByteSwap>
 800112a:	4603      	mov	r3, r0
 800112c:	80a3      	strh	r3, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	603b      	str	r3, [r7, #0]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <Setup0_Process+0xd4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	8812      	ldrh	r2, [r2, #0]
 8001140:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <Setup0_Process+0xd4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <Setup0_Process+0xd4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	88db      	ldrh	r3, [r3, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <Setup0_Process+0xba>
  {
    /* Setup with no data stage */
    NoData_Setup0();
 8001154:	f7ff fd44 	bl	8000be0 <NoData_Setup0>
 8001158:	e001      	b.n	800115e <Setup0_Process+0xbe>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
 800115a:	f7ff fe0b 	bl	8000d74 <Data_Setup0>
  }
  return Post0_Process();
 800115e:	f000 f88d 	bl	800127c <Post0_Process>
 8001162:	4603      	mov	r3, r0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	40005c50 	.word	0x40005c50
 8001170:	20003004 	.word	0x20003004
 8001174:	200002b8 	.word	0x200002b8

08001178 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <In0_Process+0x84>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	7a1b      	ldrb	r3, [r3, #8]
 8001184:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d002      	beq.n	8001192 <In0_Process+0x1a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d106      	bne.n	80011a0 <In0_Process+0x28>
  {
    DataStageIn();
 8001192:	f7ff fc9f 	bl	8000ad4 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <In0_Process+0x84>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	7a1b      	ldrb	r3, [r3, #8]
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e021      	b.n	80011e4 <In0_Process+0x6c>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d11c      	bne.n	80011e0 <In0_Process+0x68>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <In0_Process+0x84>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d110      	bne.n	80011d2 <In0_Process+0x5a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <In0_Process+0x84>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <In0_Process+0x5a>
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <In0_Process+0x84>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f881 	bl	80012cc <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <In0_Process+0x88>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <In0_Process+0x8c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4798      	blx	r3
    ControlState = STALLED;
 80011da:	2308      	movs	r3, #8
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e001      	b.n	80011e4 <In0_Process+0x6c>
  }

  else
  {
    ControlState = STALLED;
 80011e0:	2308      	movs	r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <In0_Process+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 80011ee:	f000 f845 	bl	800127c <Post0_Process>
 80011f2:	4603      	mov	r3, r0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200002b8 	.word	0x200002b8
 8001200:	200002b4 	.word	0x200002b4
 8001204:	20000290 	.word	0x20000290

08001208 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <Out0_Process+0x6c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	7a1b      	ldrb	r3, [r3, #8]
 8001214:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d002      	beq.n	8001222 <Out0_Process+0x1a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d102      	bne.n	8001228 <Out0_Process+0x20>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8001222:	2308      	movs	r3, #8
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e018      	b.n	800125a <Out0_Process+0x52>
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d002      	beq.n	8001234 <Out0_Process+0x2c>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d106      	bne.n	8001242 <Out0_Process+0x3a>
  {
    DataStageOut();
 8001234:	f7ff fbcc 	bl	80009d0 <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <Out0_Process+0x6c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	7a1b      	ldrb	r3, [r3, #8]
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	e00b      	b.n	800125a <Out0_Process+0x52>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b07      	cmp	r3, #7
 8001246:	d106      	bne.n	8001256 <Out0_Process+0x4e>
  {
    (*pProperty->Process_Status_OUT)();
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <Out0_Process+0x70>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	4798      	blx	r3
    ControlState = STALLED;
 8001250:	2308      	movs	r3, #8
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	e001      	b.n	800125a <Out0_Process+0x52>


  /* Unexpect state, STALL the endpoint */
  else
  {
    ControlState = STALLED;
 8001256:	2308      	movs	r3, #8
 8001258:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <Out0_Process+0x6c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8001264:	f000 f80a 	bl	800127c <Post0_Process>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002b8 	.word	0x200002b8
 8001278:	20000290 	.word	0x20000290

0800127c <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <Post0_Process+0x40>)
 8001282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001286:	b29b      	uxth	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	2000      	movs	r0, #0
 800128c:	f000 fd50 	bl	8001d30 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <Post0_Process+0x44>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	7a1b      	ldrb	r3, [r3, #8]
 8001296:	2b08      	cmp	r3, #8
 8001298:	d106      	bne.n	80012a8 <Post0_Process+0x2c>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <Post0_Process+0x48>)
 800129c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a0:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <Post0_Process+0x4c>)
 80012a4:	2210      	movs	r2, #16
 80012a6:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <Post0_Process+0x44>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7a1b      	ldrb	r3, [r3, #8]
 80012ae:	2b09      	cmp	r3, #9
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000058 	.word	0x20000058
 80012c0:	200002b8 	.word	0x200002b8
 80012c4:	200002be 	.word	0x200002be
 80012c8:	200002c0 	.word	0x200002c0

080012cc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <SetDeviceAddress+0x74>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	60bb      	str	r3, [r7, #8]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e01e      	b.n	8001320 <SetDeviceAddress+0x54>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ec:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80012fa:	4013      	ands	r3, r2
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001314:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001318:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nEP; i++)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3dc      	bcc.n	80012e2 <SetDeviceAddress+0x16>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SetDeviceAddress+0x78>)
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000054 	.word	0x20000054
 8001344:	40005c4c 	.word	0x40005c4c

08001348 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  pInformation = &Device_Info;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <USB_Init+0x2c>)
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <USB_Init+0x30>)
 800135c:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <USB_Init+0x2c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2202      	movs	r2, #2
 8001364:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <USB_Init+0x34>)
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <USB_Init+0x38>)
 800136a:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <USB_Init+0x3c>)
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <USB_Init+0x40>)
 8001370:	601a      	str	r2, [r3, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <USB_Init+0x34>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4798      	blx	r3
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002b8 	.word	0x200002b8
 8001384:	20000298 	.word	0x20000298
 8001388:	20000290 	.word	0x20000290
 800138c:	20000058 	.word	0x20000058
 8001390:	200002b4 	.word	0x200002b4
 8001394:	20000088 	.word	0x20000088

08001398 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
    __IO uint16_t wEPVal = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	80fb      	strh	r3, [r7, #6]
    /* stay in loop while pending interrupts */
    while (((wIstr = _GetISTR()) & ISTR_CTR) != 0) {
 80013a2:	e162      	b.n	800166a <CTR_LP+0x2d2>
        /* extract highest priority endpoint number */
        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80013a4:	4b84      	ldr	r3, [pc, #528]	; (80015b8 <CTR_LP+0x220>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <CTR_LP+0x224>)
 80013b4:	701a      	strb	r2, [r3, #0]
        if (EPindex == 0) {
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <CTR_LP+0x224>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 8108 	bne.w	80015d0 <CTR_LP+0x238>
            /* (Setup0_Process, In0_Process, Out0_Process) */

            /* save RX & TX status */
            /* and set both to NAK */

            SaveRState = _GetENDPOINT(ENDP0);
 80013c0:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <CTR_LP+0x228>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <CTR_LP+0x22c>)
 80013c8:	801a      	strh	r2, [r3, #0]
            SaveTState = SaveRState & EPTX_STAT;
 80013ca:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <CTR_LP+0x22c>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b7c      	ldr	r3, [pc, #496]	; (80015c8 <CTR_LP+0x230>)
 80013d8:	801a      	strh	r2, [r3, #0]
            SaveRState &=  EPRX_STAT;
 80013da:	4b7a      	ldr	r3, [pc, #488]	; (80015c4 <CTR_LP+0x22c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <CTR_LP+0x22c>)
 80013e8:	801a      	strh	r2, [r3, #0]

            _SetEPRxTxStatus(ENDP0, EP_RX_NAK, EP_TX_NAK);
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <CTR_LP+0x228>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80013f4:	401c      	ands	r4, r3
 80013f6:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 80013fa:	f084 0420 	eor.w	r4, r4, #32
 80013fe:	b2a2      	uxth	r2, r4
 8001400:	4b72      	ldr	r3, [pc, #456]	; (80015cc <CTR_LP+0x234>)
 8001402:	4313      	orrs	r3, r2
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <CTR_LP+0x228>)
 8001408:	601a      	str	r2, [r3, #0]

            /* DIR bit = origin of the interrupt */

            if ((wIstr & ISTR_DIR) == 0) {
 800140a:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <CTR_LP+0x220>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d13f      	bne.n	8001498 <CTR_LP+0x100>
                /* DIR = 0 */

                /* DIR = 0      => IN  int */
                /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

                _ClearEP_CTR_TX(ENDP0);
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <CTR_LP+0x228>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <CTR_LP+0x228>)
 8001422:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8001426:	400b      	ands	r3, r1
 8001428:	6013      	str	r3, [r2, #0]
                In0_Process();
 800142a:	f7ff fea5 	bl	8001178 <In0_Process>

                /* before terminate set Tx & Rx status */

                _SetEPRxTxStatus(ENDP0, SaveRState, SaveTState);
 800142e:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <CTR_LP+0x228>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8001438:	401c      	ands	r4, r3
 800143a:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <CTR_LP+0x22c>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001444:	b29b      	uxth	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <CTR_LP+0xb6>
 800144a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <CTR_LP+0x22c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <CTR_LP+0xca>
 800145e:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8001462:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <CTR_LP+0x230>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	b29b      	uxth	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <CTR_LP+0xde>
 8001472:	f084 0410 	eor.w	r4, r4, #16
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <CTR_LP+0x230>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <CTR_LP+0xf2>
 8001486:	f084 0420 	eor.w	r4, r4, #32
 800148a:	b2a2      	uxth	r2, r4
 800148c:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <CTR_LP+0x234>)
 800148e:	4313      	orrs	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <CTR_LP+0x228>)
 8001494:	601a      	str	r2, [r3, #0]
                return;
 8001496:	e0f2      	b.n	800167e <CTR_LP+0x2e6>
                /* DIR = 1 */

                /* DIR = 1 & CTR_RX       => SETUP or OUT int */
                /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

                wEPVal = _GetENDPOINT(ENDP0);
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <CTR_LP+0x228>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	80fb      	strh	r3, [r7, #6]

                if ((wEPVal & EP_SETUP) != 0) {
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03f      	beq.n	800152c <CTR_LP+0x194>
                    _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <CTR_LP+0x228>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	4a42      	ldr	r2, [pc, #264]	; (80015c0 <CTR_LP+0x228>)
 80014b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014ba:	400b      	ands	r3, r1
 80014bc:	6013      	str	r3, [r2, #0]
                    Setup0_Process();
 80014be:	f7ff fdef 	bl	80010a0 <Setup0_Process>
                    /* before terminate set Tx & Rx status */

                    _SetEPRxTxStatus(ENDP0, SaveRState, SaveTState);
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <CTR_LP+0x228>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80014cc:	401c      	ands	r4, r3
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <CTR_LP+0x22c>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <CTR_LP+0x14a>
 80014de:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <CTR_LP+0x22c>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <CTR_LP+0x15e>
 80014f2:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <CTR_LP+0x230>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <CTR_LP+0x172>
 8001506:	f084 0410 	eor.w	r4, r4, #16
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <CTR_LP+0x230>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <CTR_LP+0x186>
 800151a:	f084 0420 	eor.w	r4, r4, #32
 800151e:	b2a2      	uxth	r2, r4
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <CTR_LP+0x234>)
 8001522:	4313      	orrs	r3, r2
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <CTR_LP+0x228>)
 8001528:	601a      	str	r2, [r3, #0]
                    return;
 800152a:	e0a8      	b.n	800167e <CTR_LP+0x2e6>
                }

                else if ((wEPVal & EP_CTR_RX) != 0) {
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b29b      	uxth	r3, r3
 8001530:	b21b      	sxth	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	f280 8099 	bge.w	800166a <CTR_LP+0x2d2>
                    _ClearEP_CTR_RX(ENDP0);
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <CTR_LP+0x228>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <CTR_LP+0x228>)
 8001542:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001546:	400b      	ands	r3, r1
 8001548:	6013      	str	r3, [r2, #0]
                    Out0_Process();
 800154a:	f7ff fe5d 	bl	8001208 <Out0_Process>
                    /* before terminate set Tx & Rx status */

                    _SetEPRxTxStatus(ENDP0, SaveRState, SaveTState);
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <CTR_LP+0x228>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8001558:	401c      	ands	r4, r3
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <CTR_LP+0x22c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	b29b      	uxth	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <CTR_LP+0x1d6>
 800156a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <CTR_LP+0x22c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001578:	b29b      	uxth	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <CTR_LP+0x1ea>
 800157e:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <CTR_LP+0x230>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <CTR_LP+0x1fe>
 8001592:	f084 0410 	eor.w	r4, r4, #16
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <CTR_LP+0x230>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <CTR_LP+0x212>
 80015a6:	f084 0420 	eor.w	r4, r4, #32
 80015aa:	b2a2      	uxth	r2, r4
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <CTR_LP+0x234>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <CTR_LP+0x228>)
 80015b4:	601a      	str	r2, [r3, #0]
                    return;
 80015b6:	e062      	b.n	800167e <CTR_LP+0x2e6>
 80015b8:	200002c2 	.word	0x200002c2
 80015bc:	20000294 	.word	0x20000294
 80015c0:	40005c00 	.word	0x40005c00
 80015c4:	200002be 	.word	0x200002be
 80015c8:	200002c0 	.word	0x200002c0
 80015cc:	ffff8080 	.word	0xffff8080
            }
        } else { /* if(EPindex == 0) */
            /* Decode and service non control endpoints interrupt  */

            /* process related endpoint register */
            wEPVal = _GetENDPOINT(EPindex);
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <CTR_LP+0x2ec>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015da:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	80fb      	strh	r3, [r7, #6]
            if ((wEPVal & EP_CTR_RX) != 0) {
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da1b      	bge.n	8001626 <CTR_LP+0x28e>
                /* clear int flag */
                _ClearEP_CTR_RX(EPindex);
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <CTR_LP+0x2ec>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015f8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <CTR_LP+0x2ec>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800160c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001610:	f640 728f 	movw	r2, #3983	; 0xf8f
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

                /* call OUT service function */
                (*pEpInt_OUT[EPindex - 1])();
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <CTR_LP+0x2ec>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <CTR_LP+0x2f0>)
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	4798      	blx	r3

            } /* if((wEPVal & EP_CTR_RX) */

            if ((wEPVal & EP_CTR_TX) != 0) {
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	b29b      	uxth	r3, r3
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01b      	beq.n	800166a <CTR_LP+0x2d2>
                /* clear int flag */
                _ClearEP_CTR_TX(EPindex);
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <CTR_LP+0x2ec>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800163c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <CTR_LP+0x2ec>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001650:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001654:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

                /* call IN service function */
                (*pEpInt_IN[EPindex - 1])();
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <CTR_LP+0x2ec>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <CTR_LP+0x2f4>)
 8001664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001668:	4798      	blx	r3
    while (((wIstr = _GetISTR()) & ISTR_CTR) != 0) {
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <CTR_LP+0x2f8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <CTR_LP+0x2fc>)
 8001672:	4611      	mov	r1, r2
 8001674:	8019      	strh	r1, [r3, #0]
 8001676:	b213      	sxth	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	f6ff ae93 	blt.w	80013a4 <CTR_LP+0xc>
            } /* if((wEPVal & EP_CTR_TX) != 0) */

        }/* if(EPindex == 0) else */

    }/* while(...) */
}
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	20000294 	.word	0x20000294
 8001688:	20000038 	.word	0x20000038
 800168c:	2000001c 	.word	0x2000001c
 8001690:	40005c44 	.word	0x40005c44
 8001694:	200002c2 	.word	0x200002c2

08001698 <CTR_HP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_HP(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
    uint32_t wEPVal = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]

    while (((wIstr = _GetISTR()) & ISTR_CTR) != 0) {
 80016a2:	e059      	b.n	8001758 <CTR_HP+0xc0>
        _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <CTR_HP+0xdc>)
 80016a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016aa:	601a      	str	r2, [r3, #0]
        /* extract highest priority endpoint number */
        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <CTR_HP+0xe0>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <CTR_HP+0xe4>)
 80016bc:	701a      	strb	r2, [r3, #0]
        /* process related endpoint register */
        wEPVal = _GetENDPOINT(EPindex);
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <CTR_HP+0xe4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016c8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	607b      	str	r3, [r7, #4]
        if ((wEPVal & EP_CTR_RX) != 0) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01c      	beq.n	8001716 <CTR_HP+0x7e>
            /* clear int flag */
            _ClearEP_CTR_RX(EPindex);
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <CTR_HP+0xe4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016e6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <CTR_HP+0xe4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016fa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80016fe:	f640 728f 	movw	r2, #3983	; 0xf8f
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

            /* call OUT service function */
            (*pEpInt_OUT[EPindex - 1])();
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <CTR_HP+0xe4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <CTR_HP+0xe8>)
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	4798      	blx	r3
 8001714:	e020      	b.n	8001758 <CTR_HP+0xc0>

        } /* if((wEPVal & EP_CTR_RX) */
        else if ((wEPVal & EP_CTR_TX) != 0) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <CTR_HP+0xc0>
            /* clear int flag */
            _ClearEP_CTR_TX(EPindex);
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <CTR_HP+0xe4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800172a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <CTR_HP+0xe4>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800173e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001742:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8001746:	400a      	ands	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

            /* call IN service function */
            (*pEpInt_IN[EPindex - 1])();
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <CTR_HP+0xe4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <CTR_HP+0xec>)
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	4798      	blx	r3
    while (((wIstr = _GetISTR()) & ISTR_CTR) != 0) {
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <CTR_HP+0xdc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <CTR_HP+0xe0>)
 8001760:	4611      	mov	r1, r2
 8001762:	8019      	strh	r1, [r3, #0]
 8001764:	b213      	sxth	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	db9c      	blt.n	80016a4 <CTR_HP+0xc>


        } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* while(...) */
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40005c44 	.word	0x40005c44
 8001778:	200002c2 	.word	0x200002c2
 800177c:	20000294 	.word	0x20000294
 8001780:	20000038 	.word	0x20000038
 8001784:	2000001c 	.word	0x2000001c

08001788 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001798:	883b      	ldrh	r3, [r7, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	105b      	asrs	r3, r3, #1
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80017a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e01b      	b.n	80017ec <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	461a      	mov	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
    *pdwVal++ = temp2;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1c9a      	adds	r2, r3, #2
 80017d2:	61ba      	str	r2, [r7, #24]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	b292      	uxth	r2, r2
 80017d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	3302      	adds	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
  for (i = n; i != 0; i--)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1e0      	bne.n	80017b4 <UserToPMABufferCopy+0x2c>
  }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3724      	adds	r7, #36	; 0x24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80017fe:	b480      	push	{r7}
 8001800:	b087      	sub	sp, #28
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800180e:	883b      	ldrh	r3, [r7, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	105b      	asrs	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800181c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e00e      	b.n	8001848 <PMAToUserBufferCopy+0x4a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1d1a      	adds	r2, r3, #4
 800182e:	613a      	str	r2, [r7, #16]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	b28a      	uxth	r2, r1
 800183a:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
  for (i = n; i != 0; i--)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3b01      	subs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ed      	bne.n	800182a <PMAToUserBufferCopy+0x2c>
  }
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <SetBTABLE>:
* Input          : wRegValue: New register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  _SetBTABLE(wRegValue);
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	4904      	ldr	r1, [pc, #16]	; (800187c <SetBTABLE+0x20>)
 800186a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800186e:	4013      	ands	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40005c50 	.word	0x40005c50

08001880 <GetENDPOINT>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  return(_GetENDPOINT(bEpNum));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001892:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SetEPType>:
*                  wType: type definition.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	80bb      	strh	r3, [r7, #4]
  _SetEPType(bEpNum, wType);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018bc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80018c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018e0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80018e4:	601a      	str	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80018f0:	b490      	push	{r4, r7}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	80bb      	strh	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, wState);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001908:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001918:	b29c      	uxth	r4, r3
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	b29b      	uxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <SetEPTxStatus+0x3c>
 8001926:	f084 0310 	eor.w	r3, r4, #16
 800192a:	b29c      	uxth	r4, r3
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	b29b      	uxth	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <SetEPTxStatus+0x4e>
 8001938:	f084 0320 	eor.w	r3, r4, #32
 800193c:	b29c      	uxth	r4, r3
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <SetEPTxStatus+0x6c>)
 8001940:	4323      	orrs	r3, r4
 8001942:	b29a      	uxth	r2, r3
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800194c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bc90      	pop	{r4, r7}
 800195a:	4770      	bx	lr
 800195c:	ffff8080 	.word	0xffff8080

08001960 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8001960:	b490      	push	{r4, r7}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, wState);
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001978:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001988:	b29c      	uxth	r4, r3
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <SetEPRxStatus+0x3c>
 8001996:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800199a:	b29c      	uxth	r4, r3
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <SetEPRxStatus+0x4e>
 80019a8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80019ac:	b29c      	uxth	r4, r3
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <SetEPRxStatus+0x6c>)
 80019b0:	4323      	orrs	r3, r4
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019bc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc90      	pop	{r4, r7}
 80019ca:	4770      	bx	lr
 80019cc:	ffff8080 	.word	0xffff8080

080019d0 <SetEPTxValid>:
* Input          : bEpNum: Endpoint Number.  
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
 80019d0:	b490      	push	{r4, r7}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019e2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019f2:	b29c      	uxth	r4, r3
 80019f4:	f084 0310 	eor.w	r3, r4, #16
 80019f8:	b29c      	uxth	r4, r3
 80019fa:	f084 0320 	eor.w	r3, r4, #32
 80019fe:	b29c      	uxth	r4, r3
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <SetEPTxValid+0x50>)
 8001a02:	4323      	orrs	r3, r4
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a0e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc90      	pop	{r4, r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	ffff8080 	.word	0xffff8080

08001a24 <SetEPRxValid>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
 8001a24:	b490      	push	{r4, r7}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a36:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a46:	b29c      	uxth	r4, r3
 8001a48:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001a4c:	b29c      	uxth	r4, r3
 8001a4e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001a52:	b29c      	uxth	r4, r3
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <SetEPRxValid+0x50>)
 8001a56:	4323      	orrs	r3, r4
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a62:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc90      	pop	{r4, r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	ffff8080 	.word	0xffff8080

08001a78 <Clear_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a8a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001a96:	4013      	ands	r3, r2
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <Clear_Status_Out+0x44>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001aaa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	ffff8080 	.word	0xffff8080

08001ac0 <SetEPDoubleBuff>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDoubleBuff(uint8_t bEpNum)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  _SetEP_KIND(bEpNum);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ad2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <SetEPDoubleBuff+0x4c>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001afa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	ffff8080 	.word	0xffff8080

08001b10 <ToggleDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_TX(uint8_t bEpNum)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  _ToggleDTOG_TX(bEpNum);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b22:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b30:	4013      	ands	r3, r2
 8001b32:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b36:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b42:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <ClearDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_RX(bEpNum);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b64:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <ClearDTOG_RX+0x50>
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b7c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8001b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b9c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <ClearDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_TX(bEpNum);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bbe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <ClearDTOG_TX+0x50>
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bd6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001be4:	4013      	ands	r3, r2
 8001be6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001bea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bf6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001bfa:	601a      	str	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <SetEPTxAddr>:
*                  wAddr: new address. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460a      	mov	r2, r1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80bb      	strh	r3, [r7, #4]
  _SetEPTxAddr(bEpNum, wAddr);
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	005a      	lsls	r2, r3, #1
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <SetEPTxAddr+0x3c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40005c50 	.word	0x40005c50

08001c48 <SetEPRxAddr>:
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
  _SetEPRxAddr(bEpNum, wAddr);
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	0059      	lsls	r1, r3, #1
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <SetEPRxAddr+0x3c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <SetEPRxAddr+0x40>)
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	460a      	mov	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40005c50 	.word	0x40005c50
 8001c88:	20003004 	.word	0x20003004

08001c8c <GetEPTxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxAddr(bEpNum));
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <GetEPTxAddr+0x30>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001ca8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40005c50 	.word	0x40005c50

08001cc0 <GetEPRxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxAddr(bEpNum));
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <GetEPRxAddr+0x2c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	441a      	add	r2, r3
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <GetEPRxAddr+0x30>)
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40005c50 	.word	0x40005c50
 8001cf0:	20003004 	.word	0x20003004

08001cf4 <SetEPTxCount>:
*                  wCount: new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	80bb      	strh	r3, [r7, #4]
  _SetEPTxCount(bEpNum, wCount);
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <SetEPTxCount+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	441a      	add	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SetEPTxCount+0x38>)
 8001d14:	4413      	add	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	461a      	mov	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40005c50 	.word	0x40005c50
 8001d2c:	20003002 	.word	0x20003002

08001d30 <SetEPRxCount>:
*                  wCount: the new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	80bb      	strh	r3, [r7, #4]
  _SetEPRxCount(bEpNum, wCount);
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <SetEPRxCount+0x7c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	441a      	add	r2, r3
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <SetEPRxCount+0x80>)
 8001d50:	4413      	add	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	2b3e      	cmp	r3, #62	; 0x3e
 8001d5a:	d912      	bls.n	8001d82 <SetEPRxCount+0x52>
 8001d5c:	88bb      	ldrh	r3, [r7, #4]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	81fb      	strh	r3, [r7, #14]
 8001d62:	88bb      	ldrh	r3, [r7, #4]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <SetEPRxCount+0x42>
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	81fb      	strh	r3, [r7, #14]
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	e00f      	b.n	8001da2 <SetEPRxCount+0x72>
  _SetEPRxCount(bEpNum, wCount);
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	81fb      	strh	r3, [r7, #14]
 8001d88:	88bb      	ldrh	r3, [r7, #4]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <SetEPRxCount+0x68>
 8001d92:	89fb      	ldrh	r3, [r7, #14]
 8001d94:	3301      	adds	r3, #1
 8001d96:	81fb      	strh	r3, [r7, #14]
 8001d98:	89fb      	ldrh	r3, [r7, #14]
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40005c50 	.word	0x40005c50
 8001db0:	20003006 	.word	0x20003006

08001db4 <SetEPDblBuffAddr>:
*                  wBuf1Addr: new address of buffer 1.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	807b      	strh	r3, [r7, #2]
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 8001dc6:	88bb      	ldrh	r3, [r7, #4]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	005a      	lsls	r2, r3, #1
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <SetEPDblBuffAddr+0x60>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001de0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	0059      	lsls	r1, r3, #1
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <SetEPDblBuffAddr+0x60>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	441a      	add	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SetEPDblBuffAddr+0x64>)
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	460a      	mov	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40005c50 	.word	0x40005c50
 8001e18:	20003004 	.word	0x20003004

08001e1c <SetEPDblBuffCount>:
* Input          : bEpNum,bDir, wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	460b      	mov	r3, r1
 8001e28:	71bb      	strb	r3, [r7, #6]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	80bb      	strh	r3, [r7, #4]
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d131      	bne.n	8001e98 <SetEPDblBuffCount+0x7c>
 8001e34:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <SetEPDblBuffCount+0x130>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	441a      	add	r2, r3
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <SetEPDblBuffCount+0x134>)
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	88bb      	ldrh	r3, [r7, #4]
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	d912      	bls.n	8001e76 <SetEPDblBuffCount+0x5a>
 8001e50:	88bb      	ldrh	r3, [r7, #4]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	82fb      	strh	r3, [r7, #22]
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <SetEPDblBuffCount+0x4a>
 8001e60:	8afb      	ldrh	r3, [r7, #22]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	82fb      	strh	r3, [r7, #22]
 8001e66:	8afb      	ldrh	r3, [r7, #22]
 8001e68:	029b      	lsls	r3, r3, #10
 8001e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6e:	461a      	mov	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e020      	b.n	8001eb8 <SetEPDblBuffCount+0x9c>
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	82fb      	strh	r3, [r7, #22]
 8001e7c:	88bb      	ldrh	r3, [r7, #4]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <SetEPDblBuffCount+0x70>
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	82fb      	strh	r3, [r7, #22]
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	029b      	lsls	r3, r3, #10
 8001e90:	461a      	mov	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e00f      	b.n	8001eb8 <SetEPDblBuffCount+0x9c>
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d10c      	bne.n	8001eb8 <SetEPDblBuffCount+0x9c>
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <SetEPDblBuffCount+0x130>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	441a      	add	r2, r3
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <SetEPDblBuffCount+0x134>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	88bb      	ldrh	r3, [r7, #4]
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d131      	bne.n	8001f22 <SetEPDblBuffCount+0x106>
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <SetEPDblBuffCount+0x130>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	441a      	add	r2, r3
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <SetEPDblBuffCount+0x138>)
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ed8:	d912      	bls.n	8001f00 <SetEPDblBuffCount+0xe4>
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	82bb      	strh	r3, [r7, #20]
 8001ee0:	88bb      	ldrh	r3, [r7, #4]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <SetEPDblBuffCount+0xd4>
 8001eea:	8abb      	ldrh	r3, [r7, #20]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	82bb      	strh	r3, [r7, #20]
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	029b      	lsls	r3, r3, #10
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	e020      	b.n	8001f42 <SetEPDblBuffCount+0x126>
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	82bb      	strh	r3, [r7, #20]
 8001f06:	88bb      	ldrh	r3, [r7, #4]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <SetEPDblBuffCount+0xfa>
 8001f10:	8abb      	ldrh	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	82bb      	strh	r3, [r7, #20]
 8001f16:	8abb      	ldrh	r3, [r7, #20]
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	e00f      	b.n	8001f42 <SetEPDblBuffCount+0x126>
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d10c      	bne.n	8001f42 <SetEPDblBuffCount+0x126>
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <SetEPDblBuffCount+0x130>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	441a      	add	r2, r3
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <SetEPDblBuffCount+0x138>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40005c50 	.word	0x40005c50
 8001f50:	20003002 	.word	0x20003002
 8001f54:	20003006 	.word	0x20003006

08001f58 <GetEPDblBuf0Count>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Endpoint Buffer 0 count
*******************************************************************************/
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  return(_GetEPDblBuf0Count(bEpNum));
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <GetEPDblBuf0Count+0x34>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	441a      	add	r2, r3
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <GetEPDblBuf0Count+0x38>)
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7e:	b29b      	uxth	r3, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40005c50 	.word	0x40005c50
 8001f90:	20003002 	.word	0x20003002

08001f94 <GetEPDblBuf1Count>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Endpoint Buffer 1 count.
*******************************************************************************/
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  return(_GetEPDblBuf1Count(bEpNum));
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <GetEPDblBuf1Count+0x34>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	441a      	add	r2, r3
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <GetEPDblBuf1Count+0x38>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fba:	b29b      	uxth	r3, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40005c50 	.word	0x40005c50
 8001fcc:	20003006 	.word	0x20003006

08001fd0 <FreeUserBuffer>:
* Input          : bEpNum, bDir
* Output         : None.
* Return         : None.
*******************************************************************************/
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
  if (bDir == EP_DBUF_OUT)
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d117      	bne.n	8002016 <FreeUserBuffer+0x46>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fee:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002002:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800200e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002012:	601a      	str	r2, [r3, #0]
  }
  else if (bDir == EP_DBUF_IN)
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
  }
}
 8002014:	e019      	b.n	800204a <FreeUserBuffer+0x7a>
  else if (bDir == EP_DBUF_IN)
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d116      	bne.n	800204a <FreeUserBuffer+0x7a>
    _ToggleDTOG_RX(bEpNum);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002024:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002032:	4013      	ands	r3, r2
 8002034:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8002038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002044:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <ByteSwap>:
* Input          : wSwW: word to Swap.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	73fb      	strb	r3, [r7, #15]
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	b21a      	sxth	r2, r3
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	81bb      	strh	r3, [r7, #12]
  return(wRet);
 8002076:	89bb      	ldrh	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <USB_SIL_Init+0x24>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <USB_SIL_Init+0x28>)
 8002090:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8002094:	801a      	strh	r2, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <USB_SIL_Init+0x28>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <USB_SIL_Init+0x2c>)
 800209c:	601a      	str	r2, [r3, #0]
  return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40005c44 	.word	0x40005c44
 80020ac:	200002bc 	.word	0x200002bc
 80020b0:	40005c40 	.word	0x40005c40

080020b4 <USB_SIL_Write>:
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	73fb      	strb	r3, [r7, #15]
  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fdde 	bl	8001c8c <GetEPTxAddr>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4619      	mov	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	f7ff fb54 	bl	8001788 <UserToPMABufferCopy>

  /* Update the data length in the control register */
  SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	b292      	uxth	r2, r2
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe00 	bl	8001cf4 <SetEPTxCount>
  
  return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <blaster_usbrecv>:
static BOOL s_blaster_senddummy;

/*-----------------------------------*/

static void blaster_usbrecv(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
    uint16_t len;
    
    if (!g_blaster_rx_req) {
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <blaster_usbrecv+0x88>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d034      	beq.n	800217a <blaster_usbrecv+0x7a>
        return;
    }

    if (s_recv_buff_idx != s_recv_buff_len) {
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <blaster_usbrecv+0x8c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <blaster_usbrecv+0x90>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d130      	bne.n	800217e <blaster_usbrecv+0x7e>
        return;
    }
    
    if (GetENDPOINT(ENDP2) & EP_DTOG_TX) {
 800211c:	2002      	movs	r0, #2
 800211e:	f7ff fbaf 	bl	8001880 <GetENDPOINT>
 8002122:	4603      	mov	r3, r0
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00c      	beq.n	8002146 <blaster_usbrecv+0x46>
        /* read from buffer 0 */
        len = GetEPDblBuf0Count(ENDP2);
 800212c:	2002      	movs	r0, #2
 800212e:	f7ff ff13 	bl	8001f58 <GetEPDblBuf0Count>
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]
        PMAToUserBufferCopy(s_recv_buffer, ENDP2_RXADDR0, len);
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	461a      	mov	r2, r3
 800213a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213e:	4815      	ldr	r0, [pc, #84]	; (8002194 <blaster_usbrecv+0x94>)
 8002140:	f7ff fb5d 	bl	80017fe <PMAToUserBufferCopy>
 8002144:	e00b      	b.n	800215e <blaster_usbrecv+0x5e>
    } else {
        /* read from buffer 1 */
        len = GetEPDblBuf1Count(ENDP2);
 8002146:	2002      	movs	r0, #2
 8002148:	f7ff ff24 	bl	8001f94 <GetEPDblBuf1Count>
 800214c:	4603      	mov	r3, r0
 800214e:	80fb      	strh	r3, [r7, #6]
        PMAToUserBufferCopy(s_recv_buffer, ENDP2_RXADDR1, len);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	461a      	mov	r2, r3
 8002154:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002158:	480e      	ldr	r0, [pc, #56]	; (8002194 <blaster_usbrecv+0x94>)
 800215a:	f7ff fb50 	bl	80017fe <PMAToUserBufferCopy>
    }
    s_recv_buff_len = len;
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <blaster_usbrecv+0x90>)
 8002162:	6013      	str	r3, [r2, #0]
    s_recv_buff_idx = 0;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <blaster_usbrecv+0x8c>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    g_blaster_rx_req = FALSE;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <blaster_usbrecv+0x88>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
    FreeUserBuffer(ENDP2, EP_DBUF_OUT);
 8002170:	2101      	movs	r1, #1
 8002172:	2002      	movs	r0, #2
 8002174:	f7ff ff2c 	bl	8001fd0 <FreeUserBuffer>
 8002178:	e002      	b.n	8002180 <blaster_usbrecv+0x80>
        return;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <blaster_usbrecv+0x80>
        return;
 800217e:	bf00      	nop
}
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000115 	.word	0x20000115
 800218c:	2000015c 	.word	0x2000015c
 8002190:	20000158 	.word	0x20000158
 8002194:	20000118 	.word	0x20000118

08002198 <blaster_usbsend>:

static void blaster_usbsend(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
    uint32_t send_len;

    if (!g_blaster_tx_ready) {
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <blaster_usbsend+0x84>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d033      	beq.n	8002210 <blaster_usbsend+0x78>
        return;
    }

    send_len = ringbuf_use_len(&s_send_ring_buff);
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <blaster_usbsend+0x88>)
 80021aa:	f000 fc8f 	bl	8002acc <ringbuf_use_len>
 80021ae:	6078      	str	r0, [r7, #4]
    if (send_len > SEND_PACKET_VALID_SIZE) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b3e      	cmp	r3, #62	; 0x3e
 80021b4:	d902      	bls.n	80021bc <blaster_usbsend+0x24>
        // send full packet
        send_len = SEND_PACKET_VALID_SIZE;
 80021b6:	233e      	movs	r3, #62	; 0x3e
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	e011      	b.n	80021e0 <blaster_usbsend+0x48>
    } else if (0 == send_len) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10e      	bne.n	80021e0 <blaster_usbsend+0x48>
        if (millis() - s_blaster_sendtime >= BLASTER_HEARTBEAT_TIME) {
 80021c2:	f7fe f907 	bl	80003d4 <millis>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <blaster_usbsend+0x8c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b09      	cmp	r3, #9
 80021d0:	d806      	bhi.n	80021e0 <blaster_usbsend+0x48>
            // send heart beat packet
        } else if (s_blaster_senddummy) {
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <blaster_usbsend+0x90>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01c      	beq.n	8002214 <blaster_usbsend+0x7c>
            // send dummy packet
            s_blaster_senddummy = FALSE;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <blaster_usbsend+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
        }
    } else {
        // send not full packet
    }

    s_blaster_sendtime = millis();
 80021e0:	f7fe f8f8 	bl	80003d4 <millis>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <blaster_usbsend+0x8c>)
 80021e8:	6013      	str	r3, [r2, #0]

    ringbuf_get(&s_send_ring_buff, &s_send_packet_buff[FTDI_MODEM_STA_SIZE], send_len);
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	490f      	ldr	r1, [pc, #60]	; (800222c <blaster_usbsend+0x94>)
 80021ee:	480c      	ldr	r0, [pc, #48]	; (8002220 <blaster_usbsend+0x88>)
 80021f0:	f000 fc8f 	bl	8002b12 <ringbuf_get>
    
    /* Reset the control token to inform upper layer that a transfer is ongoing */
    g_blaster_tx_ready = FALSE;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <blaster_usbsend+0x84>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
    
    /* Copy data to ENDP1 Tx Packet Memory Area*/
    USB_SIL_Write(EP1_IN, s_send_packet_buff, FTDI_MODEM_STA_SIZE + send_len);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3302      	adds	r3, #2
 80021fe:	461a      	mov	r2, r3
 8002200:	490b      	ldr	r1, [pc, #44]	; (8002230 <blaster_usbsend+0x98>)
 8002202:	2081      	movs	r0, #129	; 0x81
 8002204:	f7ff ff56 	bl	80020b4 <USB_SIL_Write>
    /* Enable endpoint for transmission */
    SetEPTxValid(ENDP1);
 8002208:	2001      	movs	r0, #1
 800220a:	f7ff fbe1 	bl	80019d0 <SetEPTxValid>
 800220e:	e002      	b.n	8002216 <blaster_usbsend+0x7e>
        return;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <blaster_usbsend+0x7e>
            return;
 8002214:	bf00      	nop
}
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000000 	.word	0x20000000
 8002220:	200001e0 	.word	0x200001e0
 8002224:	200001f8 	.word	0x200001f8
 8002228:	200001fc 	.word	0x200001fc
 800222c:	200001a2 	.word	0x200001a2
 8002230:	200001a0 	.word	0x200001a0

08002234 <blaster_ioproc>:

/*-----------------------------------*/

static void blaster_ioproc(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
    uint8_t d;

    while ((s_recv_buff_idx < s_recv_buff_len) && !ringbuf_is_full(&s_send_ring_buff)) {
 800223a:	e05a      	b.n	80022f2 <blaster_ioproc+0xbe>
        d = s_recv_buffer[s_recv_buff_idx];
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <blaster_ioproc+0xe0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a35      	ldr	r2, [pc, #212]	; (8002318 <blaster_ioproc+0xe4>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	71fb      	strb	r3, [r7, #7]
        if (0 == s_blaster_shift_cnt) {
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <blaster_ioproc+0xe8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d133      	bne.n	80022b6 <blaster_ioproc+0x82>
            // bit-bang mode (default)
            s_blaster_shift_en = (0 != (d & BLASTER_STA_SHIFT));
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	09db      	lsrs	r3, r3, #7
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <blaster_ioproc+0xec>)
 800225c:	701a      	strb	r2, [r3, #0]
            s_blaster_read_en = (0 != (d & BLASTER_STA_READ));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <blaster_ioproc+0xf0>)
 8002272:	701a      	strb	r2, [r3, #0]
            if (s_blaster_shift_en) {
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <blaster_ioproc+0xec>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <blaster_ioproc+0x54>
                s_blaster_shift_cnt = (d & BLASTER_STA_CNT_MASK);
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <blaster_ioproc+0xe8>)
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e02f      	b.n	80022e8 <blaster_ioproc+0xb4>
            } else if (s_blaster_read_en)  {
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <blaster_ioproc+0xf0>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <blaster_ioproc+0x78>
                bport_state_set(d);
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8bc 	bl	8002410 <bport_state_set>
                d = bport_state_get();
 8002298:	f000 f8f4 	bl	8002484 <bport_state_get>
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
                ringbuf_putc(&s_send_ring_buff, d);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4820      	ldr	r0, [pc, #128]	; (8002328 <blaster_ioproc+0xf4>)
 80022a6:	f000 fc85 	bl	8002bb4 <ringbuf_putc>
 80022aa:	e01d      	b.n	80022e8 <blaster_ioproc+0xb4>
            } else {
                bport_state_set(d);
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f8ae 	bl	8002410 <bport_state_set>
 80022b4:	e018      	b.n	80022e8 <blaster_ioproc+0xb4>
            }
        } else {
            // shift mode
            if (s_blaster_read_en) {
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <blaster_ioproc+0xf0>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <blaster_ioproc+0xa2>
                d = bport_shift_io(d);
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f961 	bl	8002588 <bport_shift_io>
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
                ringbuf_putc(&s_send_ring_buff, d);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4619      	mov	r1, r3
 80022ce:	4816      	ldr	r0, [pc, #88]	; (8002328 <blaster_ioproc+0xf4>)
 80022d0:	f000 fc70 	bl	8002bb4 <ringbuf_putc>
 80022d4:	e003      	b.n	80022de <blaster_ioproc+0xaa>
            } else {
                bport_shift_out(d);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f8e7 	bl	80024ac <bport_shift_out>
            }
            s_blaster_shift_cnt--;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <blaster_ioproc+0xe8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <blaster_ioproc+0xe8>)
 80022e6:	6013      	str	r3, [r2, #0]
        }
        
        s_recv_buff_idx++;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <blaster_ioproc+0xe0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <blaster_ioproc+0xe0>)
 80022f0:	6013      	str	r3, [r2, #0]
    while ((s_recv_buff_idx < s_recv_buff_len) && !ringbuf_is_full(&s_send_ring_buff)) {
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <blaster_ioproc+0xe0>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <blaster_ioproc+0xf8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d205      	bcs.n	800230a <blaster_ioproc+0xd6>
 80022fe:	480a      	ldr	r0, [pc, #40]	; (8002328 <blaster_ioproc+0xf4>)
 8002300:	f000 fbf2 	bl	8002ae8 <ringbuf_is_full>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d098      	beq.n	800223c <blaster_ioproc+0x8>
    }
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000015c 	.word	0x2000015c
 8002318:	20000118 	.word	0x20000118
 800231c:	200001f0 	.word	0x200001f0
 8002320:	200001f4 	.word	0x200001f4
 8002324:	200001f5 	.word	0x200001f5
 8002328:	200001e0 	.word	0x200001e0
 800232c:	20000158 	.word	0x20000158

08002330 <blaster_init>:

/*-----------------------------------*/

void blaster_init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
    g_blaster_rx_req = FALSE;
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <blaster_init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    g_blaster_tx_ready = TRUE;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <blaster_init+0x5c>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]

    s_blaster_shift_cnt = 0;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <blaster_init+0x60>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    s_blaster_shift_en = FALSE;
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <blaster_init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    s_blaster_read_en = FALSE;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <blaster_init+0x68>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

    s_blaster_sendtime = 0;
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <blaster_init+0x6c>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
    s_blaster_senddummy = TRUE;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <blaster_init+0x70>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
    
    s_recv_buff_len = 0;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <blaster_init+0x74>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    s_recv_buff_idx = 0;
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <blaster_init+0x78>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

    // first two bytes are modem status
    s_send_packet_buff[0] = FTDI_MODEM_STA_DUMMY0;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <blaster_init+0x7c>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
    s_send_packet_buff[1] = FTDI_MODEM_STA_DUMMY1;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <blaster_init+0x7c>)
 8002372:	2260      	movs	r2, #96	; 0x60
 8002374:	705a      	strb	r2, [r3, #1]

    ringbuf_init(&s_send_ring_buff, s_send_buffer, sizeof(s_send_buffer));
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	490d      	ldr	r1, [pc, #52]	; (80023b0 <blaster_init+0x80>)
 800237a:	480e      	ldr	r0, [pc, #56]	; (80023b4 <blaster_init+0x84>)
 800237c:	f000 fb7f 	bl	8002a7e <ringbuf_init>

    bport_init();
 8002380:	f000 f824 	bl	80023cc <bport_init>
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000115 	.word	0x20000115
 800238c:	20000000 	.word	0x20000000
 8002390:	200001f0 	.word	0x200001f0
 8002394:	200001f4 	.word	0x200001f4
 8002398:	200001f5 	.word	0x200001f5
 800239c:	200001f8 	.word	0x200001f8
 80023a0:	200001fc 	.word	0x200001fc
 80023a4:	20000158 	.word	0x20000158
 80023a8:	2000015c 	.word	0x2000015c
 80023ac:	200001a0 	.word	0x200001a0
 80023b0:	20000160 	.word	0x20000160
 80023b4:	200001e0 	.word	0x200001e0

080023b8 <blaster_exec>:

void blaster_exec(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
    blaster_usbrecv();
 80023bc:	f7ff fea0 	bl	8002100 <blaster_usbrecv>
    blaster_ioproc();
 80023c0:	f7ff ff38 	bl	8002234 <blaster_ioproc>
    blaster_usbsend();
 80023c4:	f7ff fee8 	bl	8002198 <blaster_usbsend>
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <bport_init>:
#endif

/*-----------------------------------*/

void bport_init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80023d2:	2101      	movs	r1, #1
 80023d4:	2008      	movs	r0, #8
 80023d6:	f000 fe5b 	bl	8003090 <RCC_APB2PeriphClockCmd>

#if defined(BLUEPILL)
    // GPIO Out Configuration: TCK(PB3), TDI(PB5), TMS(PB6)
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_6;
 80023da:	2368      	movs	r3, #104	; 0x68
 80023dc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80023de:	2301      	movs	r3, #1
 80023e0:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80023e2:	2310      	movs	r3, #16
 80023e4:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4808      	ldr	r0, [pc, #32]	; (800240c <bport_init+0x40>)
 80023ec:	f000 fcfa 	bl	8002de4 <GPIO_Init>

    // GPIO In Configuration: TDO(PB4)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 80023f0:	2310      	movs	r3, #16
 80023f2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80023f4:	2348      	movs	r3, #72	; 0x48
 80023f6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <bport_init+0x40>)
 80023fe:	f000 fcf1 	bl	8002de4 <GPIO_Init>
#endif

#ifdef BLASTER_AS_MODE_EN
    // init AS mode pins here (nCS/nCE/DATAOUT)
#endif
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40010c00 	.word	0x40010c00

08002410 <bport_state_set>:

// bit-band mode output
void bport_state_set(uint8_t d)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
    TDI_OUT(0 != (d & BLASTER_STA_OUT_TDI));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <bport_state_set+0x64>)
 800242c:	601a      	str	r2, [r3, #0]
    TMS_OUT(0 != (d & BLASTER_STA_OUT_TMS));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <bport_state_set+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
    TCK_OUT(0 != (d & BLASTER_STA_OUT_TCK));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <bport_state_set+0x6c>)
 8002454:	601a      	str	r2, [r3, #0]
#ifdef BLASTER_AS_MODE_EN
    NCE_OUT(0 != (d & BLASTER_STA_OUT_NCE));
    NCS_OUT(0 != (d & BLASTER_STA_OUT_NCS));
#endif
#ifdef BLASTER_OE_LED_EN
    OE_OUT(0 != (d & BLASTER_STA_OUT_OE));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <bport_state_set+0x70>)
 8002468:	601a      	str	r2, [r3, #0]
#endif
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	42218194 	.word	0x42218194
 8002478:	42218198 	.word	0x42218198
 800247c:	4221818c 	.word	0x4221818c
 8002480:	422101a0 	.word	0x422101a0

08002484 <bport_state_get>:

// bit-bang mode input
uint8_t bport_state_get(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
    uint32_t d = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]

    d |= TDO_IN() << BLASTER_STA_IN_TDO_BIT;
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <bport_state_get+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	607b      	str	r3, [r7, #4]
#ifdef BLASTER_AS_MODE_EN
    d |= DATAOUT_IN() << BLASTER_STA_IN_DATAOUT_BIT;
#endif

    return (uint8_t)d;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	b2db      	uxtb	r3, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	42218110 	.word	0x42218110

080024ac <bport_shift_out>:

// shift mode output
void bport_shift_out(uint8_t d)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
#define BPORT_SHIFT_BIT()    TDI_OUT(d); TCK_1(); d >>= 1; TCK_0()

    BPORT_SHIFT_BIT();
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <bport_shift_out+0xd4>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <bport_shift_out+0xd8>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	71fb      	strb	r3, [r7, #7]
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <bport_shift_out+0xd8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 80024ce:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <bport_shift_out+0xd4>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <bport_shift_out+0xd8>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	71fb      	strb	r3, [r7, #7]
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <bport_shift_out+0xd8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 80024e6:	4a26      	ldr	r2, [pc, #152]	; (8002580 <bport_shift_out+0xd4>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <bport_shift_out+0xd8>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <bport_shift_out+0xd8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 80024fe:	4a20      	ldr	r2, [pc, #128]	; (8002580 <bport_shift_out+0xd4>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <bport_shift_out+0xd8>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <bport_shift_out+0xd8>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 8002516:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <bport_shift_out+0xd4>)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <bport_shift_out+0xd8>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <bport_shift_out+0xd8>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <bport_shift_out+0xd4>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <bport_shift_out+0xd8>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	71fb      	strb	r3, [r7, #7]
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <bport_shift_out+0xd8>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <bport_shift_out+0xd4>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <bport_shift_out+0xd8>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <bport_shift_out+0xd8>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <bport_shift_out+0xd4>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <bport_shift_out+0xd8>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <bport_shift_out+0xd8>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

#undef BPORT_SHIFT_BIT
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	42218194 	.word	0x42218194
 8002584:	4221818c 	.word	0x4221818c

08002588 <bport_shift_io>:

// shift mode input
uint8_t bport_shift_io(uint8_t d)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
    uint32_t dshift = d;
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	60fb      	str	r3, [r7, #12]
#undef BPORT_SHIFT_BIT
#endif //BLASTER_AS_MODE_EN

#define BPORT_SHIFT_BIT()    TDI_OUT(dshift); din = TDO_IN(); TCK_1(); dshift = (dshift >> 1) | (din << 7); TCK_0()
    
    BPORT_SHIFT_BIT();
 8002596:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <bport_shift_io+0x13c>)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <bport_shift_io+0x140>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <bport_shift_io+0x144>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	085a      	lsrs	r2, r3, #1
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	01db      	lsls	r3, r3, #7
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <bport_shift_io+0x144>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 80025ba:	4a42      	ldr	r2, [pc, #264]	; (80026c4 <bport_shift_io+0x13c>)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <bport_shift_io+0x140>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <bport_shift_io+0x144>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	085a      	lsrs	r2, r3, #1
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	01db      	lsls	r3, r3, #7
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <bport_shift_io+0x144>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 80025de:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <bport_shift_io+0x13c>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <bport_shift_io+0x140>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <bport_shift_io+0x144>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	085a      	lsrs	r2, r3, #1
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4b33      	ldr	r3, [pc, #204]	; (80026cc <bport_shift_io+0x144>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <bport_shift_io+0x13c>)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <bport_shift_io+0x140>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <bport_shift_io+0x144>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	085a      	lsrs	r2, r3, #1
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	01db      	lsls	r3, r3, #7
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <bport_shift_io+0x144>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <bport_shift_io+0x13c>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <bport_shift_io+0x140>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <bport_shift_io+0x144>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	085a      	lsrs	r2, r3, #1
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	01db      	lsls	r3, r3, #7
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <bport_shift_io+0x144>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 800264a:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <bport_shift_io+0x13c>)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <bport_shift_io+0x140>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <bport_shift_io+0x144>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	085a      	lsrs	r2, r3, #1
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	01db      	lsls	r3, r3, #7
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <bport_shift_io+0x144>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <bport_shift_io+0x13c>)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <bport_shift_io+0x140>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <bport_shift_io+0x144>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	085a      	lsrs	r2, r3, #1
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <bport_shift_io+0x144>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    BPORT_SHIFT_BIT();
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <bport_shift_io+0x13c>)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <bport_shift_io+0x140>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <bport_shift_io+0x144>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	085a      	lsrs	r2, r3, #1
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <bport_shift_io+0x144>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

#undef BPORT_SHIFT_BIT

    return dshift & 0xff;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	b2db      	uxtb	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	42218194 	.word	0x42218194
 80026c8:	42218110 	.word	0x42218110
 80026cc:	4221818c 	.word	0x4221818c

080026d0 <ft245rom_checksum>:
#include "ft245rom.h"

static uint8_t s_ft245rom_buf[FT245ROM_SIZE] = {0};

uint16_t ft245rom_checksum(const uint8_t *pbuf, uint8_t len)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
    size_t i;
    uint16_t checksum;
    
    checksum = 0xAAAA;
 80026dc:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80026e0:	817b      	strh	r3, [r7, #10]
    
    for (i = 0; i < len; i += 2) {
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e01f      	b.n	8002728 <ft245rom_checksum+0x58>
        checksum ^= ((uint16_t)pbuf[i + 1] << 8) | (uint16_t)pbuf[i];
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3301      	adds	r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	440b      	add	r3, r1
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	b21a      	sxth	r2, r3
 8002704:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002708:	4053      	eors	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	817b      	strh	r3, [r7, #10]
        checksum = (checksum << 1) | (checksum >> 15);
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	b21a      	sxth	r2, r3
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	0bdb      	lsrs	r3, r3, #15
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b21b      	sxth	r3, r3
 8002720:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < len; i += 2) {
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3302      	adds	r3, #2
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3db      	bcc.n	80026e8 <ft245rom_checksum+0x18>
    }

    return checksum;
 8002730:	897b      	ldrh	r3, [r7, #10]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <ft245rom_init>:

int ft245rom_init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
    size_t i;
    uint8_t offset = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	71fb      	strb	r3, [r7, #7]
    uint16_t checksum;
    uint8_t *pbuf = s_ft245rom_buf;
 8002746:	4b86      	ldr	r3, [pc, #536]	; (8002960 <ft245rom_init+0x224>)
 8002748:	60bb      	str	r3, [r7, #8]

    if (Blaster_StringVendor[0] + Blaster_StringProduct[0] + Blaster_StringSerial[0] > FT245ROM_STR_LIMIT) {
 800274a:	4b86      	ldr	r3, [pc, #536]	; (8002964 <ft245rom_init+0x228>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <ft245rom_init+0x22c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4413      	add	r3, r2
 8002756:	4a85      	ldr	r2, [pc, #532]	; (800296c <ft245rom_init+0x230>)
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	4413      	add	r3, r2
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	dd02      	ble.n	8002766 <ft245rom_init+0x2a>
        return -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	e0f7      	b.n	8002956 <ft245rom_init+0x21a>
    }

    *pbuf++ = 0x0;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	60ba      	str	r2, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 0x0;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60ba      	str	r2, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 6; i++) {
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e00b      	b.n	8002798 <ft245rom_init+0x5c>
        *pbuf++ = Blaster_DeviceDescriptor[8 + i];  // vid/pid/ver
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f103 0208 	add.w	r2, r3, #8
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1c59      	adds	r1, r3, #1
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	4978      	ldr	r1, [pc, #480]	; (8002970 <ft245rom_init+0x234>)
 800278e:	5c8a      	ldrb	r2, [r1, r2]
 8002790:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 6; i++) {
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d9f0      	bls.n	8002780 <ft245rom_init+0x44>
    }
    *pbuf++ = Blaster_ConfigDescriptor[7];  // attr
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	60ba      	str	r2, [r7, #8]
 80027a4:	4a73      	ldr	r2, [pc, #460]	; (8002974 <ft245rom_init+0x238>)
 80027a6:	79d2      	ldrb	r2, [r2, #7]
 80027a8:	701a      	strb	r2, [r3, #0]
    *pbuf++ = Blaster_ConfigDescriptor[8];  // pwr
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	60ba      	str	r2, [r7, #8]
 80027b0:	4a70      	ldr	r2, [pc, #448]	; (8002974 <ft245rom_init+0x238>)
 80027b2:	7a12      	ldrb	r2, [r2, #8]
 80027b4:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 0x1C;                         // chip config
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	60ba      	str	r2, [r7, #8]
 80027bc:	221c      	movs	r2, #28
 80027be:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 0x00;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	60ba      	str	r2, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
    *pbuf++ = Blaster_DeviceDescriptor[2];  // usb ver
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	60ba      	str	r2, [r7, #8]
 80027d0:	4a67      	ldr	r2, [pc, #412]	; (8002970 <ft245rom_init+0x234>)
 80027d2:	7892      	ldrb	r2, [r2, #2]
 80027d4:	701a      	strb	r2, [r3, #0]
    *pbuf++ = Blaster_DeviceDescriptor[3];  // usb ver
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	60ba      	str	r2, [r7, #8]
 80027dc:	4a64      	ldr	r2, [pc, #400]	; (8002970 <ft245rom_init+0x234>)
 80027de:	78d2      	ldrb	r2, [r2, #3]
 80027e0:	701a      	strb	r2, [r3, #0]

    // strings offset and length
    offset = 0x80 | (pbuf - s_ft245rom_buf + 2 * 3);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4a5e      	ldr	r2, [pc, #376]	; (8002960 <ft245rom_init+0x224>)
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3306      	adds	r3, #6
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	71fb      	strb	r3, [r7, #7]
    *pbuf++ = offset;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	60ba      	str	r2, [r7, #8]
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	701a      	strb	r2, [r3, #0]
    *pbuf++ = Blaster_StringVendor[0];
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	60ba      	str	r2, [r7, #8]
 8002808:	4a56      	ldr	r2, [pc, #344]	; (8002964 <ft245rom_init+0x228>)
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	701a      	strb	r2, [r3, #0]
    offset += Blaster_StringVendor[0];
 800280e:	4b55      	ldr	r3, [pc, #340]	; (8002964 <ft245rom_init+0x228>)
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4413      	add	r3, r2
 8002816:	71fb      	strb	r3, [r7, #7]
    *pbuf++ = offset;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	79fa      	ldrb	r2, [r7, #7]
 8002820:	701a      	strb	r2, [r3, #0]
    *pbuf++ = Blaster_StringProduct[0];
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <ft245rom_init+0x22c>)
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	701a      	strb	r2, [r3, #0]
    offset += Blaster_StringProduct[0];
 800282e:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <ft245rom_init+0x22c>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	4413      	add	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
    *pbuf++ = offset;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	701a      	strb	r2, [r3, #0]
    *pbuf++ = Blaster_StringSerial[0];
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	4a48      	ldr	r2, [pc, #288]	; (800296c <ft245rom_init+0x230>)
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < Blaster_StringVendor[0]; i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e00a      	b.n	800286a <ft245rom_init+0x12e>
        *pbuf++ = Blaster_StringVendor[i];  // vendor string
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	60ba      	str	r2, [r7, #8]
 800285a:	4942      	ldr	r1, [pc, #264]	; (8002964 <ft245rom_init+0x228>)
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	440a      	add	r2, r1
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < Blaster_StringVendor[0]; i++) {
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3301      	adds	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <ft245rom_init+0x228>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4293      	cmp	r3, r2
 8002874:	d3ee      	bcc.n	8002854 <ft245rom_init+0x118>
    }
    for (i = 0; i < Blaster_StringProduct[0]; i++) {
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	e00a      	b.n	8002892 <ft245rom_init+0x156>
        *pbuf++ = Blaster_StringProduct[i]; // product string
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	4939      	ldr	r1, [pc, #228]	; (8002968 <ft245rom_init+0x22c>)
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	440a      	add	r2, r1
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < Blaster_StringProduct[0]; i++) {
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3301      	adds	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b35      	ldr	r3, [pc, #212]	; (8002968 <ft245rom_init+0x22c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4293      	cmp	r3, r2
 800289c:	d3ee      	bcc.n	800287c <ft245rom_init+0x140>
    }
    for (i = 0; i < Blaster_StringSerial[0]; i++) {
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e00a      	b.n	80028ba <ft245rom_init+0x17e>
        *pbuf++ = Blaster_StringSerial[i];  // serial string
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	60ba      	str	r2, [r7, #8]
 80028aa:	4930      	ldr	r1, [pc, #192]	; (800296c <ft245rom_init+0x230>)
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	440a      	add	r2, r1
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < Blaster_StringSerial[0]; i++) {
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3301      	adds	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <ft245rom_init+0x230>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d3ee      	bcc.n	80028a4 <ft245rom_init+0x168>
    }
    
    *pbuf++ = 0x2;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	60ba      	str	r2, [r7, #8]
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 0x3;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	2203      	movs	r2, #3
 80028d8:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 0x1;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	60ba      	str	r2, [r7, #8]
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 0x0;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	60ba      	str	r2, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
    
    *pbuf++ = 'R';
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	60ba      	str	r2, [r7, #8]
 80028f4:	2252      	movs	r2, #82	; 0x52
 80028f6:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 'E';
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	2245      	movs	r2, #69	; 0x45
 8002900:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 'V';
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	60ba      	str	r2, [r7, #8]
 8002908:	2256      	movs	r2, #86	; 0x56
 800290a:	701a      	strb	r2, [r3, #0]
    *pbuf++ = 'B';
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	2242      	movs	r2, #66	; 0x42
 8002914:	701a      	strb	r2, [r3, #0]

    // fill zeros
    while ((pbuf - s_ft245rom_buf) < (FT245ROM_SIZE - 2)) {
 8002916:	e004      	b.n	8002922 <ft245rom_init+0x1e6>
        *pbuf++ = 0x0;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	60ba      	str	r2, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    while ((pbuf - s_ft245rom_buf) < (FT245ROM_SIZE - 2)) {
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <ft245rom_init+0x224>)
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	2b7d      	cmp	r3, #125	; 0x7d
 800292a:	ddf5      	ble.n	8002918 <ft245rom_init+0x1dc>
    }

    // checksum
    checksum = ft245rom_checksum(s_ft245rom_buf, FT245ROM_SIZE - 2);
 800292c:	217e      	movs	r1, #126	; 0x7e
 800292e:	480c      	ldr	r0, [pc, #48]	; (8002960 <ft245rom_init+0x224>)
 8002930:	f7ff fece 	bl	80026d0 <ft245rom_checksum>
 8002934:	4603      	mov	r3, r0
 8002936:	80bb      	strh	r3, [r7, #4]
    *pbuf++ = checksum & 0xFF;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	60ba      	str	r2, [r7, #8]
 800293e:	88ba      	ldrh	r2, [r7, #4]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
    *pbuf++ = (checksum >> 8) & 0xFF;
 8002944:	88bb      	ldrh	r3, [r7, #4]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b299      	uxth	r1, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	60ba      	str	r2, [r7, #8]
 8002950:	b2ca      	uxtb	r2, r1
 8002952:	701a      	strb	r2, [r3, #0]

    return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000200 	.word	0x20000200
 8002964:	080039d0 	.word	0x080039d0
 8002968:	080039e0 	.word	0x080039e0
 800296c:	20000008 	.word	0x20000008
 8002970:	08003998 	.word	0x08003998
 8002974:	080039ac 	.word	0x080039ac

08002978 <ft245rom_read>:

uint16_t ft245rom_read(uint8_t addr)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
    return ((uint16_t)s_ft245rom_buf[addr + 1] << 8) | s_ft245rom_buf[addr];
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	3301      	adds	r3, #1
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <ft245rom_read+0x30>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b21a      	sxth	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	4905      	ldr	r1, [pc, #20]	; (80029a8 <ft245rom_read+0x30>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	b21b      	sxth	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b21b      	sxth	r3, r3
 800299a:	b29b      	uxth	r3, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000200 	.word	0x20000200

080029ac <main>:
#include "blaster.h"

/*-----------------------------------*/

int main(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80029b0:	2101      	movs	r1, #1
 80029b2:	2001      	movs	r0, #1
 80029b4:	f000 fb6c 	bl	8003090 <RCC_APB2PeriphClockCmd>

    // disable JTAG锟斤拷use SWD only
    GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 80029b8:	2101      	movs	r1, #1
 80029ba:	480e      	ldr	r0, [pc, #56]	; (80029f4 <main+0x48>)
 80029bc:	f000 faea 	bl	8002f94 <GPIO_PinRemapConfig>

    timebase_init();
 80029c0:	f7fd fce0 	bl	8000384 <timebase_init>
    led_init();
 80029c4:	f7fd fbdc 	bl	8000180 <led_init>
    blaster_init();
 80029c8:	f7ff fcb2 	bl	8002330 <blaster_init>
    
    USB_HW_Config();
 80029cc:	f000 fcb2 	bl	8003334 <USB_HW_Config>
    USB_Init();
 80029d0:	f7fe fcc0 	bl	8001354 <USB_Init>

    led_flash(1000, 100, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2164      	movs	r1, #100	; 0x64
 80029d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029dc:	f7fd fbe8 	bl	80001b0 <led_flash>

    while (1) {
        led_update();
 80029e0:	f7fd fc1a 	bl	8000218 <led_update>
        if (bDeviceState == CONFIGURED)
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <main+0x4c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d1f9      	bne.n	80029e0 <main+0x34>
        {
            blaster_exec();
 80029ec:	f7ff fce4 	bl	80023b8 <blaster_exec>
        led_update();
 80029f0:	e7f6      	b.n	80029e0 <main+0x34>
 80029f2:	bf00      	nop
 80029f4:	00300200 	.word	0x00300200
 80029f8:	20000284 	.word	0x20000284

080029fc <memcpy>:
#include <stddef.h>

void *memcpy(void *dest, const void *src, size_t n)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	char *a = (char *) dest;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	61bb      	str	r3, [r7, #24]
	const char *b = (const char *) src;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	617b      	str	r3, [r7, #20]
	size_t i;

	for (i = 0; i < n; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	e00a      	b.n	8002a2c <memcpy+0x30>
		a[i] = b[i];
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	441a      	add	r2, r3
 8002a1c:	69b9      	ldr	r1, [r7, #24]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	440b      	add	r3, r1
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; i++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3f0      	bcc.n	8002a16 <memcpy+0x1a>


	return dest;
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <memset>:

void *memset(void *dest, int c, size_t n)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	char *a = (char *) dest;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	61bb      	str	r3, [r7, #24]
	char b = (char) c;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	75fb      	strb	r3, [r7, #23]
	size_t i;

	for (i = 0; i < n; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e007      	b.n	8002a6a <memset+0x2a>
		a[i] = b;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	7dfa      	ldrb	r2, [r7, #23]
 8002a62:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; i++)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3f3      	bcc.n	8002a5a <memset+0x1a>


	return dest;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3724      	adds	r7, #36	; 0x24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <ringbuf_init>:
// 判断x是否是2的次方
#define is_power_of_2(x) ((x) != 0 && (((x) & ((x) - 1)) == 0))

// 初始化缓冲区
u32 ringbuf_init(ringbuf_t *ring_buf, void *buffer, u32 size)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
    if (!is_power_of_2(size)) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <ringbuf_init+0x1e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1e5a      	subs	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <ringbuf_init+0x22>
        return FALSE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e011      	b.n	8002ac4 <ringbuf_init+0x46>
    }
    
    memset(ring_buf, 0, sizeof(ringbuf_t));
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ffcb 	bl	8002a40 <memset>
    ring_buf->buffer = buffer;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	601a      	str	r2, [r3, #0]
    ring_buf->size = size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	605a      	str	r2, [r3, #4]
    ring_buf->in = 0;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
    ring_buf->out = 0;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
    
    return TRUE;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <ringbuf_use_len>:

// 缓冲区数据的长度
u32 ringbuf_use_len(const ringbuf_t *ring_buf)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    return (ring_buf->in - ring_buf->out);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <ringbuf_is_full>:

// 判断缓冲区是否满
u32 ringbuf_is_full(const ringbuf_t *ring_buf)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    return (ring_buf->in - ring_buf->out == ring_buf->size);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	1ad2      	subs	r2, r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <ringbuf_get>:

// 从缓冲区中取数据
u32 ringbuf_get(ringbuf_t *ring_buf, void *buffer, u32 size)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
    u32 len = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
    
    size = MIN(size, ring_buf->in - ring_buf->out);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	bf28      	it	cs
 8002b32:	4613      	movcs	r3, r2
 8002b34:	607b      	str	r3, [r7, #4]
    /* first get the data from fifo->out until the end of the buffer */
    len = MIN(size, ring_buf->size - (ring_buf->out & (ring_buf->size - 1)));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	400b      	ands	r3, r1
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	bf28      	it	cs
 8002b4e:	4613      	movcs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
    memcpy((u8*)buffer, (u8*)ring_buf->buffer + (ring_buf->out & (ring_buf->size - 1)), len);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	400b      	ands	r3, r1
 8002b62:	4413      	add	r3, r2
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4619      	mov	r1, r3
 8002b68:	68b8      	ldr	r0, [r7, #8]
 8002b6a:	f7ff ff47 	bl	80029fc <memcpy>
    /* then get the rest (if any) from the beginning of the buffer */
    memcpy((u8*)buffer + len, (u8*)ring_buf->buffer, size - len);
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	18d0      	adds	r0, r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f7ff ff3c 	bl	80029fc <memcpy>
    ring_buf->out += size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	441a      	add	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	60da      	str	r2, [r3, #12]
    
    // buffer中没有数据
    if (ring_buf->in == ring_buf->out) {
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d106      	bne.n	8002baa <ringbuf_get+0x98>
        ring_buf->in = ring_buf->out = 0;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	609a      	str	r2, [r3, #8]
    }
    
    return size;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <ringbuf_putc>:
    return size;
}

// 向缓冲区中存字节数据
u32 ringbuf_putc(ringbuf_t *ring_buf, const u8 c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
    if (ringbuf_is_full(ring_buf)) {
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff91 	bl	8002ae8 <ringbuf_is_full>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <ringbuf_putc+0x1c>
        return 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e010      	b.n	8002bf2 <ringbuf_putc+0x3e>
    }

    *((u8*)ring_buf->buffer + (ring_buf->in & (ring_buf->size - 1))) = c;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	400b      	ands	r3, r1
 8002be0:	4413      	add	r3, r2
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	701a      	strb	r2, [r3, #0]
    ring_buf->in++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
    
    return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <NVIC_PriorityGroupConfig+0x20>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	60d3      	str	r3, [r2, #12]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	230f      	movs	r3, #15
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	78db      	ldrb	r3, [r3, #3]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d03a      	beq.n	8002cb2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <NVIC_Init+0xbc>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f1c3 0304 	rsb	r3, r3, #4
 8002c50:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	461a      	mov	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	789b      	ldrb	r3, [r3, #2]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002c80:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <NVIC_Init+0xc0>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	b2c9      	uxtb	r1, r1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c9a:	4911      	ldr	r1, [pc, #68]	; (8002ce0 <NVIC_Init+0xc0>)
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	0952      	lsrs	r2, r2, #5
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002cac:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002cb0:	e00f      	b.n	8002cd2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002cba:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <NVIC_Init+0xc0>)
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	0952      	lsrs	r2, r2, #5
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002cca:	f100 0320 	add.w	r3, r0, #32
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <EXTI_Init+0xe0>)
 8002cf2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04f      	beq.n	8002d9c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <EXTI_Init+0xe0>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	492f      	ldr	r1, [pc, #188]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	492b      	ldr	r1, [pc, #172]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	4920      	ldr	r1, [pc, #128]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002d46:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	491c      	ldr	r1, [pc, #112]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	795b      	ldrb	r3, [r3, #5]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d10e      	bne.n	8002d7c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4917      	ldr	r1, [pc, #92]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4913      	ldr	r1, [pc, #76]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8002d7a:	e01d      	b.n	8002db8 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <EXTI_Init+0xe0>)
 8002d7e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	795b      	ldrb	r3, [r3, #5]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	e00d      	b.n	8002db8 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	461a      	mov	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6819      	ldr	r1, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	400a      	ands	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <EXTI_ClearITPendingBit+0x18>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6153      	str	r3, [r2, #20]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40010400 	.word	0x40010400

08002de4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	78db      	ldrb	r3, [r3, #3]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	789b      	ldrb	r3, [r3, #2]
 8002e20:	461a      	mov	r2, r3
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d044      	beq.n	8002ebc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e038      	b.n	8002eb0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d126      	bne.n	8002eaa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002e62:	220f      	movs	r2, #15
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4013      	ands	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	78db      	ldrb	r3, [r3, #3]
 8002e88:	2b28      	cmp	r3, #40	; 0x28
 8002e8a:	d105      	bne.n	8002e98 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	409a      	lsls	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	615a      	str	r2, [r3, #20]
 8002e96:	e008      	b.n	8002eaa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	78db      	ldrb	r3, [r3, #3]
 8002e9c:	2b48      	cmp	r3, #72	; 0x48
 8002e9e:	d104      	bne.n	8002eaa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b07      	cmp	r3, #7
 8002eb4:	d9c3      	bls.n	8002e3e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	2bff      	cmp	r3, #255	; 0xff
 8002ec2:	d946      	bls.n	8002f52 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e03a      	b.n	8002f46 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d127      	bne.n	8002f40 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4013      	ands	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	2b28      	cmp	r3, #40	; 0x28
 8002f1e:	d105      	bne.n	8002f2c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	3308      	adds	r3, #8
 8002f24:	2201      	movs	r2, #1
 8002f26:	409a      	lsls	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	78db      	ldrb	r3, [r3, #3]
 8002f30:	2b48      	cmp	r3, #72	; 0x48
 8002f32:	d105      	bne.n	8002f40 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	3308      	adds	r3, #8
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b07      	cmp	r3, #7
 8002f4a:	d9c1      	bls.n	8002ed0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	605a      	str	r2, [r3, #4]
  }
}
 8002f52:	bf00      	nop
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8002f84:	887a      	ldrh	r2, [r7, #2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	615a      	str	r2, [r3, #20]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	da03      	bge.n	8002fbe <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <GPIO_PinRemapConfig+0xdc>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e002      	b.n	8002fc4 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <GPIO_PinRemapConfig+0xdc>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fde:	d10a      	bne.n	8002ff6 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002fe6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <GPIO_PinRemapConfig+0xdc>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <GPIO_PinRemapConfig+0xdc>)
 8002fee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002ff2:	6053      	str	r3, [r2, #4]
 8002ff4:	e021      	b.n	800303a <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8003000:	2203      	movs	r2, #3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43db      	mvns	r3, r3
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e00d      	b.n	800303a <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0d5b      	lsrs	r3, r3, #21
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4013      	ands	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8003038:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0d5b      	lsrs	r3, r3, #21
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da03      	bge.n	8003060 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8003058:	4a05      	ldr	r2, [pc, #20]	; (8003070 <GPIO_PinRemapConfig+0xdc>)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800305e:	e002      	b.n	8003066 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8003060:	4a03      	ldr	r2, [pc, #12]	; (8003070 <GPIO_PinRemapConfig+0xdc>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	6053      	str	r3, [r2, #4]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40010000 	.word	0x40010000

08003074 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <RCC_USBCLKConfig+0x18>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	424200d8 	.word	0x424200d8

08003090 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <RCC_APB2PeriphClockCmd+0x38>)
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	4908      	ldr	r1, [pc, #32]	; (80030c8 <RCC_APB2PeriphClockCmd+0x38>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80030ae:	e006      	b.n	80030be <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <RCC_APB2PeriphClockCmd+0x38>)
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <RCC_APB2PeriphClockCmd+0x38>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	618b      	str	r3, [r1, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40021000 	.word	0x40021000

080030cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d006      	beq.n	80030ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <RCC_APB1PeriphClockCmd+0x38>)
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <RCC_APB1PeriphClockCmd+0x38>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80030ea:	e006      	b.n	80030fa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <RCC_APB1PeriphClockCmd+0x38>)
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <RCC_APB1PeriphClockCmd+0x38>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	61cb      	str	r3, [r1, #28]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40021000 	.word	0x40021000

08003108 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 8003108:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800310a:	e003      	b.n	8003114 <LoopCopyDataInit>

0800310c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 800310e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003110:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003112:	3104      	adds	r1, #4

08003114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8003114:	4809      	ldr	r0, [pc, #36]	; (800313c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8003118:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800311a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800311c:	d3f6      	bcc.n	800310c <CopyDataInit>
	ldr	r2, =_sbss
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8003120:	e002      	b.n	8003128 <LoopFillZerobss>

08003122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 8003122:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003124:	f842 3b04 	str.w	r3, [r2], #4

08003128 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 800312a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800312c:	d3f9      	bcc.n	8003122 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 800312e:	f000 f847 	bl	80031c0 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 8003132:	f7ff fc3b 	bl	80029ac <main>
	bx	lr    
 8003136:	4770      	bx	lr
	ldr	r3, =_sidata
 8003138:	08003a00 	.word	0x08003a00
	ldr	r0, =_sdata
 800313c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003140:	200000dc 	.word	0x200000dc
	ldr	r2, =_sbss
 8003144:	200000dc 	.word	0x200000dc
	ldr	r3, = _ebss
 8003148:	200002c4 	.word	0x200002c4

0800314c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC1_2_IRQHandler>

0800314e <NMI_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Hard Fault exception occurs */
    while (1) {
 800315e:	e7fe      	b.n	800315e <HardFault_Handler+0x4>

08003160 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Memory Manage exception occurs */
    while (1) {
 8003164:	e7fe      	b.n	8003164 <MemManage_Handler+0x4>

08003166 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Bus Fault exception occurs */
    while (1) {
 800316a:	e7fe      	b.n	800316a <BusFault_Handler+0x4>

0800316c <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Usage Fault exception occurs */
    while (1) {
 8003170:	e7fe      	b.n	8003170 <UsageFault_Handler+0x4>

08003172 <SVC_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVC_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <DebugMon_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMon_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <PendSV_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSV_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <USB_HP_CAN1_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	af00      	add	r7, sp, #0
    CTR_HP();
 800319a:	f7fe fa7d 	bl	8001698 <CTR_HP>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <USB_LP_CAN1_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	af00      	add	r7, sp, #0
     USB_Istr();
 80031a6:	f000 f9c5 	bl	8003534 <USB_Istr>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}

080031ae <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	af00      	add	r7, sp, #0
    EXTI_ClearITPendingBit(EXTI_Line18);
 80031b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80031b6:	f7ff fe07 	bl	8002dc8 <EXTI_ClearITPendingBit>
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <SystemInit+0x5c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <SystemInit+0x5c>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <SystemInit+0x5c>)
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4911      	ldr	r1, [pc, #68]	; (800321c <SystemInit+0x5c>)
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <SystemInit+0x60>)
 80031d8:	4013      	ands	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <SystemInit+0x5c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <SystemInit+0x5c>)
 80031e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <SystemInit+0x5c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <SystemInit+0x5c>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <SystemInit+0x5c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <SystemInit+0x5c>)
 80031fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003202:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <SystemInit+0x5c>)
 8003206:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800320a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800320c:	f000 f80c 	bl	8003228 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <SystemInit+0x64>)
 8003212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003216:	609a      	str	r2, [r3, #8]
#endif 
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	f8ff0000 	.word	0xf8ff0000
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800322c:	f000 f802 	bl	8003234 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	2300      	movs	r3, #0
 8003240:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <SetSysClockTo72+0xf8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a39      	ldr	r2, [pc, #228]	; (800332c <SetSysClockTo72+0xf8>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800324e:	4b37      	ldr	r3, [pc, #220]	; (800332c <SetSysClockTo72+0xf8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <SetSysClockTo72+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800326a:	d1f0      	bne.n	800324e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <SetSysClockTo72+0xf8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003278:	2301      	movs	r3, #1
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	e001      	b.n	8003282 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d14b      	bne.n	8003320 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003288:	4b29      	ldr	r3, [pc, #164]	; (8003330 <SetSysClockTo72+0xfc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <SetSysClockTo72+0xfc>)
 800328e:	f043 0310 	orr.w	r3, r3, #16
 8003292:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <SetSysClockTo72+0xfc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <SetSysClockTo72+0xfc>)
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <SetSysClockTo72+0xfc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <SetSysClockTo72+0xfc>)
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <SetSysClockTo72+0xf8>)
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <SetSysClockTo72+0xf8>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <SetSysClockTo72+0xf8>)
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <SetSysClockTo72+0xf8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <SetSysClockTo72+0xf8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <SetSysClockTo72+0xf8>)
 80032c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c6:	6053      	str	r3, [r2, #4]

    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <SetSysClockTo72+0xf8>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a17      	ldr	r2, [pc, #92]	; (800332c <SetSysClockTo72+0xf8>)
 80032ce:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80032d2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <SetSysClockTo72+0xf8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <SetSysClockTo72+0xf8>)
 80032da:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80032de:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <SetSysClockTo72+0xf8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <SetSysClockTo72+0xf8>)
 80032e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80032ec:	bf00      	nop
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <SetSysClockTo72+0xf8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f9      	beq.n	80032ee <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <SetSysClockTo72+0xf8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a0b      	ldr	r2, [pc, #44]	; (800332c <SetSysClockTo72+0xf8>)
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <SetSysClockTo72+0xf8>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <SetSysClockTo72+0xf8>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003312:	bf00      	nop
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <SetSysClockTo72+0xf8>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d1f9      	bne.n	8003314 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40022000 	.word	0x40022000

08003334 <USB_HW_Config>:
* Description    : Configures Main system clocks & power.
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_HW_Config(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
    file (startup_stm32xxx.s) before to branch to application main.
    To reconfigure the default setting of SystemInit() function, refer to
    system_stm32xxx.c file
    */

    USB_GPIO_Config();
 8003338:	f000 f84e 	bl	80033d8 <USB_GPIO_Config>
    USB_Interrupts_Config();
 800333c:	f000 f812 	bl	8003364 <USB_Interrupts_Config>
    USB_EXTI_Config();
 8003340:	f000 f864 	bl	800340c <USB_EXTI_Config>
    USB_Clock_Config();
 8003344:	f000 f802 	bl	800334c <USB_Clock_Config>
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <USB_Clock_Config>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Clock_Config(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
    /* Select USBCLK source */
    RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8003350:	2000      	movs	r0, #0
 8003352:	f7ff fe8f 	bl	8003074 <RCC_USBCLKConfig>

    /* Enable the USB clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8003356:	2101      	movs	r1, #1
 8003358:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800335c:	f7ff feb6 	bl	80030cc <RCC_APB1PeriphClockCmd>
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}

08003364 <USB_Interrupts_Config>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* 2 bit for pre-emption priority, 2 bits for subpriority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800336a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800336e:	f7ff fc45 	bl	8002bfc <NVIC_PriorityGroupConfig>

    /* Enable the USB interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8003372:	2314      	movs	r3, #20
 8003374:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8003376:	2302      	movs	r3, #2
 8003378:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800337e:	2301      	movs	r3, #1
 8003380:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fc4b 	bl	8002c20 <NVIC_Init>

    /* Enable the USB Wake-up interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
 800338a:	232a      	movs	r3, #42	; 0x2a
 800338c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800338e:	2301      	movs	r3, #1
 8003390:	717b      	strb	r3, [r7, #5]
    //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fc43 	bl	8002c20 <NVIC_Init>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <USB_Cable_Ctrl>:
* Input          : NewState: new state.
* Output         : None.
* Return         : None
*******************************************************************************/
void USB_Cable_Ctrl(FunctionalState NewState)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
    if (NewState != DISABLE) {
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <USB_Cable_Ctrl+0x1c>
        GPIO_SetBits(GPIOA, GPIO_Pin_15);
 80033b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033b8:	4806      	ldr	r0, [pc, #24]	; (80033d4 <USB_Cable_Ctrl+0x30>)
 80033ba:	f7ff fdcf 	bl	8002f5c <GPIO_SetBits>
    } else {
        GPIO_ResetBits(GPIOA, GPIO_Pin_15);
    }
}
 80033be:	e004      	b.n	80033ca <USB_Cable_Ctrl+0x26>
        GPIO_ResetBits(GPIOA, GPIO_Pin_15);
 80033c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033c4:	4803      	ldr	r0, [pc, #12]	; (80033d4 <USB_Cable_Ctrl+0x30>)
 80033c6:	f7ff fdd7 	bl	8002f78 <GPIO_ResetBits>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40010800 	.word	0x40010800

080033d8 <USB_GPIO_Config>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_GPIO_Config(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable the USB disconnect GPIO clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80033de:	2101      	movs	r1, #1
 80033e0:	2004      	movs	r0, #4
 80033e2:	f7ff fe55 	bl	8003090 <RCC_APB2PeriphClockCmd>

    /* PA15 used as USB pull-up */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80033ec:	2310      	movs	r3, #16
 80033ee:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80033f0:	2302      	movs	r3, #2
 80033f2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4803      	ldr	r0, [pc, #12]	; (8003408 <USB_GPIO_Config+0x30>)
 80033fa:	f7ff fcf3 	bl	8002de4 <GPIO_Init>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40010800 	.word	0x40010800

0800340c <USB_EXTI_Config>:
* Input         : None.
* Output        : None.
* Return value  : The direction value.
*******************************************************************************/
void USB_EXTI_Config(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
    EXTI_InitTypeDef EXTI_InitStructure;

    /* Configure the EXTI line 18 connected internally to the USB IP */
    EXTI_ClearITPendingBit(EXTI_Line18);
 8003412:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003416:	f7ff fcd7 	bl	8002dc8 <EXTI_ClearITPendingBit>
    EXTI_InitStructure.EXTI_Line = EXTI_Line18;
 800341a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800341e:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8003420:	2308      	movs	r3, #8
 8003422:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003424:	2301      	movs	r3, #1
 8003426:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
 8003428:	463b      	mov	r3, r7
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fc5a 	bl	8002ce4 <EXTI_Init>
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
    uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

    Device_Serial0 = *(uint32_t *)ID1_ADDR;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <Get_SerialNum+0x40>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]
    Device_Serial1 = *(uint32_t *)ID2_ADDR;
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <Get_SerialNum+0x44>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60bb      	str	r3, [r7, #8]
    Device_Serial2 = *(uint32_t *)ID3_ADDR;
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <Get_SerialNum+0x48>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	607b      	str	r3, [r7, #4]

    Device_Serial0 += Device_Serial1;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    Device_Serial0 += Device_Serial2;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    if (Device_Serial0 != 0) {
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <Get_SerialNum+0x38>
        IntToUnicode(Device_Serial0, &Blaster_StringSerial[2], 8);
 8003466:	2208      	movs	r2, #8
 8003468:	4906      	ldr	r1, [pc, #24]	; (8003484 <Get_SerialNum+0x4c>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f80c 	bl	8003488 <IntToUnicode>
    }
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	1ffff7e8 	.word	0x1ffff7e8
 800347c:	1ffff7ec 	.word	0x1ffff7ec
 8003480:	1ffff7f0 	.word	0x1ffff7f0
 8003484:	2000000a 	.word	0x2000000a

08003488 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode(uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]

    for (idx = 0 ; idx < len ; idx ++) {
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
 800349e:	e027      	b.n	80034f0 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	0f1b      	lsrs	r3, r3, #28
 80034a4:	2b09      	cmp	r3, #9
 80034a6:	d80b      	bhi.n	80034c0 <IntToUnicode+0x38>
            pbuf[ 2 * idx] = (value >> 28) + '0';
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	0f1b      	lsrs	r3, r3, #28
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4619      	mov	r1, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	440b      	add	r3, r1
 80034b8:	3230      	adds	r2, #48	; 0x30
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e00a      	b.n	80034d6 <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	0f1b      	lsrs	r3, r3, #28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4619      	mov	r1, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	440b      	add	r3, r1
 80034d0:	3237      	adds	r2, #55	; 0x37
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	60fb      	str	r3, [r7, #12]

        pbuf[ 2 * idx + 1] = 0;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	3301      	adds	r3, #1
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	4413      	add	r3, r2
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
    for (idx = 0 ; idx < len ; idx ++) {
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	3301      	adds	r3, #1
 80034ee:	75fb      	strb	r3, [r7, #23]
 80034f0:	7dfa      	ldrb	r2, [r7, #23]
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3d3      	bcc.n	80034a0 <IntToUnicode+0x18>
    }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <EP2_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP2_OUT_Callback(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
    g_blaster_rx_req = TRUE;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <EP2_OUT_Callback+0x14>)
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000115 	.word	0x20000115

0800351c <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
    g_blaster_tx_ready = TRUE;
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <EP1_IN_Callback+0x14>)
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000000 	.word	0x20000000

08003534 <USB_Istr>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
#if (IMR_MSK & ISTR_ESOF)
    uint32_t i = 0;
#endif
    __IO uint32_t EP[8];

    wIstr = _GetISTR();
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <USB_Istr+0x54>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29a      	uxth	r2, r3
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <USB_Istr+0x58>)
 8003542:	801a      	strh	r2, [r3, #0]

#if (IMR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <USB_Istr+0x58>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <USB_Istr+0x5c>)
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <USB_Istr+0x28>
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP();
 8003558:	f7fd ff1e 	bl	8001398 <CTR_LP>
    }
#endif
    
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <USB_Istr+0x58>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <USB_Istr+0x5c>)
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <USB_Istr+0x4a>
        _SetISTR((uint16_t)CLR_RESET);
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <USB_Istr+0x54>)
 8003572:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8003576:	601a      	str	r2, [r3, #0]
        Device_Property.Reset();
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <USB_Istr+0x60>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
        ESOF_Callback();
#endif
    }
#endif
} /* USB_Istr */
 800357e:	bf00      	nop
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40005c44 	.word	0x40005c44
 800358c:	200002c2 	.word	0x200002c2
 8003590:	200002bc 	.word	0x200002bc
 8003594:	20000058 	.word	0x20000058

08003598 <Blaster_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Blaster_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
    /* Update the serial number string descriptor with the data from the unique ID*/
    Get_SerialNum();
 800359c:	f7ff ff4c 	bl	8003438 <Get_SerialNum>

    pInformation->Current_Configuration = 0;
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <Blaster_Init+0x28>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	729a      	strb	r2, [r3, #10]

    /* Connect the device */
    PowerOn();
 80035a8:	f000 f9c2 	bl	8003930 <PowerOn>

    /* Perform basic device initialization operations */
    USB_SIL_Init();
 80035ac:	f7fe fd6a 	bl	8002084 <USB_SIL_Init>

    ft245rom_init();
 80035b0:	f7ff f8c4 	bl	800273c <ft245rom_init>

    bDeviceState = UNCONNECTED;
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <Blaster_Init+0x2c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200002b8 	.word	0x200002b8
 80035c4:	20000284 	.word	0x20000284

080035c8 <Blaster_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Blaster_Reset(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
    /* Set the device as not configured */
    pInformation->Current_Configuration = 0;
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <Blaster_Reset+0xfc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	729a      	strb	r2, [r3, #10]
    pInformation->Current_Interface = 0;/*the default Interface*/
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <Blaster_Reset+0xfc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	72da      	strb	r2, [r3, #11]

    /* Current Feature initialization */
    pInformation->Current_Feature = Blaster_ConfigDescriptor[7];
 80035dc:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <Blaster_Reset+0xfc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a39      	ldr	r2, [pc, #228]	; (80036c8 <Blaster_Reset+0x100>)
 80035e2:	79d2      	ldrb	r2, [r2, #7]
 80035e4:	725a      	strb	r2, [r3, #9]

    SetBTABLE(BTABLE_ADDRESS);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7fe f938 	bl	800185c <SetBTABLE>

    /* Initialize Endpoint 0 */
    SetEPType(ENDP0, EP_CONTROL);
 80035ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7fe f957 	bl	80018a4 <SetEPType>
    SetEPTxStatus(ENDP0, EP_TX_NAK);
 80035f6:	2120      	movs	r1, #32
 80035f8:	2000      	movs	r0, #0
 80035fa:	f7fe f979 	bl	80018f0 <SetEPTxStatus>
    SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80035fe:	2120      	movs	r1, #32
 8003600:	2000      	movs	r0, #0
 8003602:	f7fe fb21 	bl	8001c48 <SetEPRxAddr>
    SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8003606:	2160      	movs	r1, #96	; 0x60
 8003608:	2000      	movs	r0, #0
 800360a:	f7fe fafd 	bl	8001c08 <SetEPTxAddr>
    Clear_Status_Out(ENDP0);
 800360e:	2000      	movs	r0, #0
 8003610:	f7fe fa32 	bl	8001a78 <Clear_Status_Out>
    SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <Blaster_Reset+0x104>)
 8003616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800361a:	b29b      	uxth	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	2000      	movs	r0, #0
 8003620:	f7fe fb86 	bl	8001d30 <SetEPRxCount>
    SetEPRxValid(ENDP0);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fe f9fd 	bl	8001a24 <SetEPRxValid>

    /* Initialize Endpoint 1 as BULK IN */
    SetEPType(ENDP1, EP_BULK);
 800362a:	2100      	movs	r1, #0
 800362c:	2001      	movs	r0, #1
 800362e:	f7fe f939 	bl	80018a4 <SetEPType>
    SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8003632:	21a0      	movs	r1, #160	; 0xa0
 8003634:	2001      	movs	r0, #1
 8003636:	f7fe fae7 	bl	8001c08 <SetEPTxAddr>
    SetEPTxCount(ENDP1, ENDP1_TXSIZE);
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	2001      	movs	r0, #1
 800363e:	f7fe fb59 	bl	8001cf4 <SetEPTxCount>
    SetEPTxStatus(ENDP1, EP_TX_NAK);
 8003642:	2120      	movs	r1, #32
 8003644:	2001      	movs	r0, #1
 8003646:	f7fe f953 	bl	80018f0 <SetEPTxStatus>
    SetEPRxStatus(ENDP1, EP_RX_DIS);
 800364a:	2100      	movs	r1, #0
 800364c:	2001      	movs	r0, #1
 800364e:	f7fe f987 	bl	8001960 <SetEPRxStatus>

    /* Initialize Endpoint 2 as BULK OUT */
    SetEPType(ENDP2, EP_BULK);
 8003652:	2100      	movs	r1, #0
 8003654:	2002      	movs	r0, #2
 8003656:	f7fe f925 	bl	80018a4 <SetEPType>
    SetEPDoubleBuff(ENDP2); 
 800365a:	2002      	movs	r0, #2
 800365c:	f7fe fa30 	bl	8001ac0 <SetEPDoubleBuff>
    SetEPDblBuffAddr(ENDP2, ENDP2_RXADDR0, ENDP2_RXADDR1); 
 8003660:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003668:	2002      	movs	r0, #2
 800366a:	f7fe fba3 	bl	8001db4 <SetEPDblBuffAddr>
    SetEPDblBuffCount(ENDP2, EP_DBUF_OUT, ENDP2_RXSIZE); 
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	2101      	movs	r1, #1
 8003672:	2002      	movs	r0, #2
 8003674:	f7fe fbd2 	bl	8001e1c <SetEPDblBuffCount>
    ClearDTOG_RX(ENDP2); 
 8003678:	2002      	movs	r0, #2
 800367a:	f7fe fa6a 	bl	8001b52 <ClearDTOG_RX>
    ClearDTOG_TX(ENDP2); 
 800367e:	2002      	movs	r0, #2
 8003680:	f7fe fa94 	bl	8001bac <ClearDTOG_TX>
    ToggleDTOG_TX(ENDP2); 
 8003684:	2002      	movs	r0, #2
 8003686:	f7fe fa43 	bl	8001b10 <ToggleDTOG_TX>
    SetEPRxStatus(ENDP2, EP_RX_VALID);
 800368a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800368e:	2002      	movs	r0, #2
 8003690:	f7fe f966 	bl	8001960 <SetEPRxStatus>
    SetEPTxStatus(ENDP2, EP_TX_DIS);
 8003694:	2100      	movs	r1, #0
 8003696:	2002      	movs	r0, #2
 8003698:	f7fe f92a 	bl	80018f0 <SetEPTxStatus>
    
    SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <Blaster_Reset+0x104>)
 800369e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fe fb42 	bl	8001d30 <SetEPRxCount>
    SetEPRxValid(ENDP0);
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fe f9b9 	bl	8001a24 <SetEPRxValid>

    /* Set the device to response on default address */
    SetDeviceAddress(0);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7fd fe0a 	bl	80012cc <SetDeviceAddress>

    bDeviceState = ATTACHED;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <Blaster_Reset+0x108>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200002b8 	.word	0x200002b8
 80036c8:	080039ac 	.word	0x080039ac
 80036cc:	20000058 	.word	0x20000058
 80036d0:	20000284 	.word	0x20000284

080036d4 <Blaster_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Blaster_SetConfiguration(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
    if (pInformation->Current_Configuration != 0) {
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <Blaster_SetConfiguration+0x1c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	7a9b      	ldrb	r3, [r3, #10]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <Blaster_SetConfiguration+0x14>
        /* Device configured */
        bDeviceState = CONFIGURED;
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <Blaster_SetConfiguration+0x20>)
 80036e4:	2205      	movs	r2, #5
 80036e6:	601a      	str	r2, [r3, #0]
    }
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	200002b8 	.word	0x200002b8
 80036f4:	20000284 	.word	0x20000284

080036f8 <Blaster_SetDeviceAddress>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Blaster_SetDeviceAddress(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
    bDeviceState = ADDRESSED;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <Blaster_SetDeviceAddress+0x14>)
 80036fe:	2204      	movs	r2, #4
 8003700:	601a      	str	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000284 	.word	0x20000284

08003710 <Blaster_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Blaster_Status_In(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
    return;
 8003714:	bf00      	nop
}
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <Blaster_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Blaster_Status_Out(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
    return;
 8003720:	bf00      	nop
}
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <Blaster_Data_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Blaster_Data_Setup(uint8_t RequestNo)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
    uint8_t *(*CopyRoutine)(uint16_t);
    uint8_t addr;

    CopyRoutine = NULL;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]

    // emulate ft245
    if (Type_Recipient == (VENDOR_REQUEST | DEVICE_RECIPIENT)) {
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <Blaster_Data_Setup+0xc4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d13d      	bne.n	80037c0 <Blaster_Data_Setup+0x98>
        if (pInformation->USBbmRequestType & 0x80) {
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <Blaster_Data_Setup+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b25b      	sxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	da35      	bge.n	80037bc <Blaster_Data_Setup+0x94>
            // device -> host
            switch (RequestNo) {
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b05      	cmp	r3, #5
 8003754:	d020      	beq.n	8003798 <Blaster_Data_Setup+0x70>
 8003756:	2b90      	cmp	r3, #144	; 0x90
 8003758:	d127      	bne.n	80037aa <Blaster_Data_Setup+0x82>
            case FTDI_VEN_REQ_RD_EEPROM:
                addr = ((pInformation->USBwIndex >> 8) & 0x3F) << 1;
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <Blaster_Data_Setup+0xc4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	889b      	ldrh	r3, [r3, #4]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	b29b      	uxth	r3, r3
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800376c:	72fb      	strb	r3, [r7, #11]
                s_Report_Buf[0] = ft245rom_read(addr);
 800376e:	7afb      	ldrb	r3, [r7, #11]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f901 	bl	8002978 <ft245rom_read>
 8003776:	4603      	mov	r3, r0
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <Blaster_Data_Setup+0xc8>)
 800377c:	701a      	strb	r2, [r3, #0]
                s_Report_Buf[1] = ft245rom_read(addr + 1);
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	3301      	adds	r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f8f7 	bl	8002978 <ft245rom_read>
 800378a:	4603      	mov	r3, r0
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <Blaster_Data_Setup+0xc8>)
 8003790:	705a      	strb	r2, [r3, #1]
                CopyRoutine = Blaster_Get_VendorData;
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <Blaster_Data_Setup+0xcc>)
 8003794:	60fb      	str	r3, [r7, #12]
                break;
 8003796:	e013      	b.n	80037c0 <Blaster_Data_Setup+0x98>
            case FTDI_VEN_REQ_GET_MODEM_STA:
                // return fixed modem status
                s_Report_Buf[0] = FTDI_MODEM_STA_DUMMY0;
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <Blaster_Data_Setup+0xc8>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
                s_Report_Buf[1] = FTDI_MODEM_STA_DUMMY1;
 800379e:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <Blaster_Data_Setup+0xc8>)
 80037a0:	2260      	movs	r2, #96	; 0x60
 80037a2:	705a      	strb	r2, [r3, #1]
                CopyRoutine = Blaster_Get_VendorData;
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <Blaster_Data_Setup+0xcc>)
 80037a6:	60fb      	str	r3, [r7, #12]
                break;
 80037a8:	e00a      	b.n	80037c0 <Blaster_Data_Setup+0x98>
            default:
                // return dummy data
                s_Report_Buf[0] = 0x0;
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <Blaster_Data_Setup+0xc8>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
                s_Report_Buf[1] = 0x0;
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <Blaster_Data_Setup+0xc8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	705a      	strb	r2, [r3, #1]
                CopyRoutine = Blaster_Get_VendorData;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <Blaster_Data_Setup+0xcc>)
 80037b8:	60fb      	str	r3, [r7, #12]
                break;
 80037ba:	e001      	b.n	80037c0 <Blaster_Data_Setup+0x98>
            }
        } else {
            return USB_UNSUPPORT;
 80037bc:	2302      	movs	r3, #2
 80037be:	e010      	b.n	80037e2 <Blaster_Data_Setup+0xba>
        }
    }

    if (CopyRoutine == NULL) {
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <Blaster_Data_Setup+0xa2>
        return USB_UNSUPPORT;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e00b      	b.n	80037e2 <Blaster_Data_Setup+0xba>
    }

    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <Blaster_Data_Setup+0xc4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	619a      	str	r2, [r3, #24]
    pInformation->Ctrl_Info.Usb_wOffset = 0;
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <Blaster_Data_Setup+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	825a      	strh	r2, [r3, #18]
    (*CopyRoutine)(0);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2000      	movs	r0, #0
 80037de:	4798      	blx	r3
    
    return USB_SUCCESS;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200002b8 	.word	0x200002b8
 80037f0:	20000280 	.word	0x20000280
 80037f4:	08003901 	.word	0x08003901

080037f8 <Blaster_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Blaster_NoData_Setup(uint8_t RequestNo)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
    if ((Type_Recipient == (VENDOR_REQUEST | DEVICE_RECIPIENT))) {
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <Blaster_NoData_Setup+0x4c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d112      	bne.n	8003836 <Blaster_NoData_Setup+0x3e>
        switch (RequestNo) {
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d80c      	bhi.n	8003830 <Blaster_NoData_Setup+0x38>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <Blaster_NoData_Setup+0x24>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003831 	.word	0x08003831
 8003820:	08003831 	.word	0x08003831
 8003824:	08003831 	.word	0x08003831
 8003828:	08003831 	.word	0x08003831
 800382c:	08003831 	.word	0x08003831
        case FTDI_VEN_REQ_SET_FLOW_CTRL:
            break;
        case FTDI_VEN_REQ_SET_MODEM_CTRL:
            break;
        default:
            break;
 8003830:	bf00      	nop
        }
        return USB_SUCCESS;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <Blaster_NoData_Setup+0x40>
    }
    
    return USB_UNSUPPORT;
 8003836:	2302      	movs	r3, #2
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	200002b8 	.word	0x200002b8

08003848 <Blaster_GetDeviceDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Blaster_GetDeviceDescriptor(uint16_t Length)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
    return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <Blaster_GetDeviceDescriptor+0x20>)
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd f896 	bl	8000988 <Standard_GetDescriptorData>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200000ac 	.word	0x200000ac

0800386c <Blaster_GetConfigDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Blaster_GetConfigDescriptor(uint16_t Length)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
    return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <Blaster_GetConfigDescriptor+0x20>)
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd f884 	bl	8000988 <Standard_GetDescriptorData>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200000b4 	.word	0x200000b4

08003890 <Blaster_GetStringDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Blaster_GetStringDescriptor(uint16_t Length)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	80fb      	strh	r3, [r7, #6]
    uint8_t wValue0 = pInformation->USBwValue0;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <Blaster_GetStringDescriptor+0x38>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	78db      	ldrb	r3, [r3, #3]
 80038a0:	73fb      	strb	r3, [r7, #15]
    
    if (wValue0 > 4) {
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d901      	bls.n	80038ac <Blaster_GetStringDescriptor+0x1c>
        return NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e009      	b.n	80038c0 <Blaster_GetStringDescriptor+0x30>
    } else {
        return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4a06      	ldr	r2, [pc, #24]	; (80038cc <Blaster_GetStringDescriptor+0x3c>)
 80038b2:	441a      	add	r2, r3
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd f865 	bl	8000988 <Standard_GetDescriptorData>
 80038be:	4603      	mov	r3, r0
    }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200002b8 	.word	0x200002b8
 80038cc:	200000bc 	.word	0x200000bc

080038d0 <Blaster_Get_Interface_Setting>:
*                  - AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : USB_SUCCESS or USB_UNSUPPORT.
*******************************************************************************/
RESULT Blaster_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	460a      	mov	r2, r1
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	4613      	mov	r3, r2
 80038de:	71bb      	strb	r3, [r7, #6]
    if (AlternateSetting > 0) {
 80038e0:	79bb      	ldrb	r3, [r7, #6]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <Blaster_Get_Interface_Setting+0x1a>
        return USB_UNSUPPORT;
 80038e6:	2302      	movs	r3, #2
 80038e8:	e005      	b.n	80038f6 <Blaster_Get_Interface_Setting+0x26>
    } else if (Interface > 0) {
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <Blaster_Get_Interface_Setting+0x24>
        return USB_UNSUPPORT;
 80038f0:	2302      	movs	r3, #2
 80038f2:	e000      	b.n	80038f6 <Blaster_Get_Interface_Setting+0x26>
    }
    
    return USB_SUCCESS;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <Blaster_Get_VendorData>:
* Input          : Length.
* Output         : None.
* Return         : Vendor Data base address.
*******************************************************************************/
uint8_t *Blaster_Get_VendorData(uint16_t Length)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
    if (Length == 0) {
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <Blaster_Get_VendorData+0x1c>
        pInformation->Ctrl_Info.Usb_wLength = sizeof(s_Report_Buf);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <Blaster_Get_VendorData+0x28>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2202      	movs	r2, #2
 8003916:	821a      	strh	r2, [r3, #16]
        return NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <Blaster_Get_VendorData+0x1e>
    }
    
    return (uint8_t *)s_Report_Buf;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <Blaster_Get_VendorData+0x2c>)
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	200002b8 	.word	0x200002b8
 800392c:	20000280 	.word	0x20000280

08003930 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
    uint16_t wRegVal;

    /*** cable plugged-in ? ***/
    USB_Cable_Ctrl(ENABLE);
 8003936:	2001      	movs	r0, #1
 8003938:	f7ff fd34 	bl	80033a4 <USB_Cable_Ctrl>

    /*** CNTR_PWDN = 0 ***/
    wRegVal = CNTR_FRES;
 800393c:	2301      	movs	r3, #1
 800393e:	80fb      	strh	r3, [r7, #6]
    _SetCNTR(wRegVal);
 8003940:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <PowerOn+0x44>)
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	6013      	str	r3, [r2, #0]

    /*** CNTR_FRES = 0 ***/
    wInterrupt_Mask = 0;
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <PowerOn+0x48>)
 8003948:	2200      	movs	r2, #0
 800394a:	801a      	strh	r2, [r3, #0]
    _SetCNTR(wInterrupt_Mask);
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <PowerOn+0x48>)
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <PowerOn+0x44>)
 8003952:	601a      	str	r2, [r3, #0]
    /*** Clear pending interrupts ***/
    _SetISTR(0);
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <PowerOn+0x4c>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
    /*** Set interrupt mask ***/
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <PowerOn+0x48>)
 800395c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003960:	801a      	strh	r2, [r3, #0]
    _SetCNTR(wInterrupt_Mask);
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <PowerOn+0x48>)
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	4b03      	ldr	r3, [pc, #12]	; (8003974 <PowerOn+0x44>)
 8003968:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40005c40 	.word	0x40005c40
 8003978:	200002bc 	.word	0x200002bc
 800397c:	40005c44 	.word	0x40005c44

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
